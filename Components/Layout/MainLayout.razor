@using Syncfusion.Blazor
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Mantis.Domain.Shared.Services
@using Mantis.Components.Layout
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Routing
@using System.Security.Claims;

@inherits LayoutComponentBase
@inject BreadcrumbService BreadcrumbService
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager

<div class="top-bar">
    <div class="left-icons">
        <a href="/">
            <img src="/img/surefirelogo-full.png" alt="App Logo" class="app-logo" />
        </a>
    </div>

    <div class="sf-search-bar">
        <input type="text" placeholder="Start something..." class="sf-search-input" />
        <span class="e-icons e-search sf-search-icon"></span>
    </div>

    <div class="right-icons" style="color:#fff;">
        @if (User.Identity.IsAuthenticated == true)
        {
            <a class="sf-useremail" href="/Account/Manage">@User.Identity.Name</a>
        }
        <a href="/Account/Manage" class="e-icon-btn e-icons">
            <FluentIcon Value="@(new Icons.Regular.Size24.Person())" />
        </a>
    </div>
</div>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        @if (!IsHomePage)
        {
            <div class="breadcrum">
                <SfBreadcrumb>
                    <BreadcrumbItems>
                        @foreach (var item in BreadcrumbService.Items)
                        {
                            <BreadcrumbItem Text="@item.Text" Url="@item.Url" />
                        }
                    </BreadcrumbItems>
                </SfBreadcrumb>
            </div>
        }
        <article>
            @Body
        </article>
        <FluentDialogProvider />
        <FluentTooltipProvider />
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private ClaimsPrincipal User { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool IsHomePage => NavigationManager.Uri == NavigationManager.BaseUri;

    protected override async Task OnInitializedAsync()
    {
        User = (await authenticationStateTask).User;
    }
}
