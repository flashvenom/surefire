@using Mantis.Domain.Shared.Services
@using Mantis.Components.Layout
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Routing
@using System.Security.Claims;

@inherits LayoutComponentBase
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<div class="top-bar">
    <div class="left-icons">
        <a href="/">
            <img src="/img/surefirelogo-full.png" alt="App Logo" class="app-logo" />
        </a>
    </div>
    <_searchbar />

    <div class="right-icons">
        @if (User.Identity.IsAuthenticated == true)
        {
            <_profilemenu UserId="@UserId" />
        }
        else
        {
            <a href="/Account/Manage" class="e-icon-btn e-icons">
                <FluentIcon Value="@(new Icons.Regular.Size24.Person())" />
            </a>
        }
    </div>
</div>

<div class="page" >
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        @* @if (!IsHomePage)
        {
            <SfBreadcrumb>
                <BreadcrumbItems>
                    <BreadcrumbItem IconCss="e-icons e-home" Url="/" />
                    <BreadcrumbItem Text="Clients" Url="/Clients" />
                    <BreadcrumbItem Text="List" Url="/Clients/List" />
                    <BreadcrumbItem Text="Renewals" Url="/Renewals" />
                    <BreadcrumbItem Text="Contacts" Url="/Contacts" />
                    <BreadcrumbItem Text="Locations" Url="/Locations" />

                </BreadcrumbItems>
            </SfBreadcrumb>
        } *@
        <article>
            @Body
        </article>
        <FluentToastProvider />
        <FluentDialogProvider />
        <FluentTooltipProvider />
        <FluentMessageBarProvider />
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>



@code {
    private ClaimsPrincipal User { get; set; }
    public string UserId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool IsHomePage => NavigationManager.Uri == NavigationManager.BaseUri;

    protected override async Task OnInitializedAsync()
    {
        User = (await authenticationStateTask).User;
        UserId = UserManager.GetUserId(User);
    }

}
