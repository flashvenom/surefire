@using Syncfusion.Blazor
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Mantis.Domain.Shared.Services
@using Mantis.Components.Layout
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Routing
@using System.Security.Claims;

@inherits LayoutComponentBase
@inject BreadcrumbService BreadcrumbService
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

<div class="top-bar">
    <div class="left-icons">
        <a href="/">
            <img src="/img/surefirelogo-full.png" alt="App Logo" class="app-logo" />
        </a>
    </div>

    <div class="sf-search-bar">
        <input type="text" placeholder="Start something..." class="sf-search-input" />
        <span class="e-icons e-search sf-search-icon"></span>
    </div>

    <div class="right-icons" style="color:#fff;">
        @if (User.Identity.IsAuthenticated == true)
        {
            <a class="sf-useremail" href="/Account/Manage">@User.Identity.Name</a>
        }
        <a href="/Account/Manage" class="e-icon-btn e-icons">
            <FluentIcon Value="@(new Icons.Regular.Size24.Person())" />
        </a>
    </div>
</div>



<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="breadcrum">
            <SfBreadcrumb>
                <BreadcrumbItems>
                    @foreach (var item in BreadcrumbService.Items)
                    {
                        <BreadcrumbItem Text="@item.Text" Url="@item.Url" />
                    }
                </BreadcrumbItems>
            </SfBreadcrumb>
        </div>
        <article>
            @Body
        </article>
        <FluentDialogProvider />
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<style>
    .page {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 50px);
        position: relative;
        background-color: #e8e8e8;
    }
    .top-bar {
        width: 100%;
        height: 50px;
        background-image: linear-gradient(77deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        display: flex;
        align-items: center;
        justify-content: space-between;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        position: fixed;
        top: 0px;
        z-index: 1000;
    }
    .sidebar {
        padding-top:20px;
        position: fixed;
        top: 50px;
        width:50px;
        height: calc(100vh - 70px);
        border-right: 1px solid #cecece;
        background-color: #e8e8e8;
        z-index: 1000;
    }
    .left-icons {
        display: flex;
        align-items: center;
    }

    .app-logo {
        opacity: 0.7;
        height: 20px;
        /* Adjust the height to match your design requirements */
    }

    .search-bar {
        flex-grow: 1;
        display: flex;
        justify-content: center;
    }

    .search-input {
        width: 100%;
        max-width: 400px;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .right-icons {
        display: flex;
        align-items: center;
    }

    :root .e-icon-btn {
        background-color: transparent;
        border: none;
        opacity: 0.7;
        color: #fff !important;
        fill: #fff;
        transition: opacity 0.3s;
    }

    :root .e-icon-btn svg {
        color: #fff !important;
        fill: #fff !important;
    }

        .e-icon-btn:hover {
            opacity: 1;
            box-shadow: none;
            border: none;
        }

        .e-icon-btn .e-icons {
            color: white;
        }

    .main-content {
        flex-grow: 1;
        padding: 20px;
        overflow: auto;
    }

    .e-toolbar-spacer {
        flex-grow: 1;
    }
</style>
@code {
    private ClaimsPrincipal User { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //User = (await UserManager.GetUserAsync(SignInManager.Context.User))?.Principal;
        User = (await authenticationStateTask).User;
    }
    private void NavigateToManage()
    {
        Navigation.NavigateTo("/Account/Manage");
    }
}