@implements IDisposable
@using Microsoft.FluentUI.AspNetCore.Components
@inject NavigationManager NavigationManager

<input type="checkbox" title="Navigation menu" class="navbar-toggler" style="display:none" />

<NavLink class="btn nav-link" href="/" Match="NavLinkMatch.Prefix" title="Home">
    <div class="nb-blueline nb-active"></div>
    <FluentIcon Value="@(new Icons.Filled.Size24.Home())" Class="@GetNavItemClass("Home")" />
</NavLink>
<br />

<NavLink class="btn nav-link" href="Clients/Commercial" Match="NavLinkMatch.Prefix" title="Clients">
    <div class="nb-blueline"></div>
    <FluentIcon Value="@(new Icons.Regular.Size24.Briefcase())" Class="@GetNavItemClass("Clients")" />
</NavLink>
<br />

<NavLink class="btn nav-link" href="People" Match="NavLinkMatch.Prefix" title="People">
    <div class="nb-blueline"></div>
    <FluentIcon Value="@(new Icons.Regular.Size24.People())" Class="@GetNavItemClass("Clients")" />
</NavLink>
<br />

<NavLink class="btn nav-link" href="Policies" Match="NavLinkMatch.Prefix" title="Policies">
    <div class="nb-blueline"></div>
    <FluentIcon Value="@(new Icons.Regular.Size24.DocumentMultiple())" Class="@GetNavItemClass("Clients")" />
</NavLink>
<br />

<NavLink class="btn nav-link" href="Carriers" Match="NavLinkMatch.Prefix" title="Carriers">
    <div class="nb-blueline"></div>
    <FluentIcon Value="@(new Icons.Regular.Size24.BuildingRetailShield())" Class="@GetNavItemClass("Clients")" />
</NavLink>
<br />

<NavLink class="btn nav-link" href="Locations" Match="NavLinkMatch.Prefix" title="Locations">
    <div class="nb-blueline"></div>
    <FluentIcon Value="@(new Icons.Regular.Size24.Location())" Class="@GetNavItemClass("Clients")" />
</NavLink>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private string GetNavItemClass(string href)
    {
        return currentUrl != null && currentUrl.StartsWith(href, StringComparison.OrdinalIgnoreCase) ? "selected-nav-item" : "";
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

<style>
    .custom-icon-color {
        color: #0078D4; /* Your desired default color */
    }
    .e-icons.e-medium {
        font-size: 20px !important;
    }
    .nav-link {
        position: relative;
        color:#000;
        padding: 0px;
    }

        .nav-link .selected-nav-item {
            color: #000;
        }

        .nav-link:hover::after {
            content: attr(title);
            position: absolute;
            left: 100%;
            margin-left: 8px;
            background: #333;
            color: #fff;
            padding: 4px 8px;
            border-radius: 4px;
            white-space: nowrap;
        }
</style>
