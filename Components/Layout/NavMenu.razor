@implements IDisposable
@using Microsoft.FluentUI.AspNetCore.Components
@inject NavigationManager NavigationManager
@inject NavigationService NavigationService

<input type="checkbox" title="Navigation menu" class="navbar-toggler" style="display:none" />

<div class="sfnav @(GetNavItemClass("Home"))">
    <div class="nb-blueline@(GetNavItemClass("Home"))"></div>
    <NavLink class="nav-link" href="/" Match="NavLinkMatch.Prefix" title="Home">
        @if(GetNavItemClass("Home") == "nb-active")
        {
            <FluentIcon Value="@(new Icons.Filled.Size24.Home())" Class="active-icon" />
        }
        else
        {
            <FluentIcon Value="@(new Icons.Regular.Size24.Home())" Class="inactive-icon" />
        }
    </NavLink>
</div>
<br />

<div class="sfnav @(GetNavItemClass("Clients"))">
    <div class="nb-blueline@(GetNavItemClass("Clients"))"></div>
    <NavLink class="nav-link" href="@NavigationService.GetLastClientPage()" Match="NavLinkMatch.Prefix" title="Clients">
        @if (GetNavItemClass("Clients") == "nb-active")
        {
            <FluentIcon Value="@(new Icons.Filled.Size24.Briefcase())" Class="active-icon" />
        }
        else
        {
            <FluentIcon Value="@(new Icons.Regular.Size24.Briefcase())" Class="inactive-icon" />
        }
    </NavLink>
</div>
<br />

<div class="sfnav @(GetNavItemClass("People"))">
    <div class="nb-blueline@(GetNavItemClass("People"))"></div>
    <NavLink class="nav-link" href="People" Match="NavLinkMatch.Prefix" title="People">
        @if (GetNavItemClass("People") == "nb-active")
        {
            <FluentIcon Value="@(new Icons.Filled.Size24.People())" Class="active-icon" />
        }
        else
        {
            <FluentIcon Value="@(new Icons.Regular.Size24.People())" Class="inactive-icon" />
        }
    </NavLink>
</div>
<br />

<div class="sfnav @(GetNavItemClass("Policies"))">
    <div class="nb-blueline@(GetNavItemClass("Policies"))"></div>
    <NavLink class="nav-link" href="Policies" Match="NavLinkMatch.Prefix" title="Policies">
        @if (GetNavItemClass("Policies") == "nb-active")
        {
            <FluentIcon Value="@(new Icons.Filled.Size24.DocumentMultiple())" Class="active-icon" />
        }
        else
        {
            <FluentIcon Value="@(new Icons.Regular.Size24.DocumentMultiple())" Class="inactive-icon" />
        }
    </NavLink>
</div>
<br />

<div class="sfnav @(GetNavItemClass("Carriers"))">
    <div class="nb-blueline@(GetNavItemClass("Carriers"))"></div>
    <NavLink class="nav-link" href="Carriers" Match="NavLinkMatch.Prefix" title="Carriers">
        @if (GetNavItemClass("Carriers") == "nb-active")
        {
            <FluentIcon Value="@(new Icons.Filled.Size24.BuildingRetailShield())" Class="active-icon" />
        }
        else
        {
            <FluentIcon Value="@(new Icons.Regular.Size24.BuildingRetailShield())" Class="inactive-icon" />
        }
    </NavLink>
</div>
<br />

<div class="sfnav @(GetNavItemClass("Locations"))">
    <div class="nb-blueline@(GetNavItemClass("Locations"))"></div>
    <NavLink class="nav-link" href="Locations" Match="NavLinkMatch.Prefix" title="Locations">
        @if (GetNavItemClass("Locations") == "nb-active")
        {
            <FluentIcon Value="@(new Icons.Filled.Size24.Location())" Class="active-icon" />
        }
        else
        {
            <FluentIcon Value="@(new Icons.Regular.Size24.Location())" Class="inactive-icon" />
        }
    </NavLink>
</div>
<br />

<div class="sfnav @(GetNavItemClass("Renewals"))">
    <div class="nb-blueline@(GetNavItemClass("Renewals"))"></div>
    <NavLink class="nav-link" href="Renewals" Match="NavLinkMatch.Prefix" title="Renewals">
        @if (GetNavItemClass("Renewals") == "nb-active")
        {
            <FluentIcon Value="@(new Icons.Filled.Size24.ApprovalsApp())" Class="active-icon" />
        }
        else
        {
            <FluentIcon Value="@(new Icons.Regular.Size24.ApprovalsApp())" Class="inactive-icon" />
        }
    </NavLink>
</div>
<br />

<style>
:root .nb-bluelinenb-active {
    transition: all 0.5s ease;
    width: 2px;
    height: 37px;
    float: left;
    position: relative;
    top: -6px;
    left: 4px;
    background-color: #036ac4 !important;
    transform-origin: center; /* Set the origin to the center */
    transform: scaleY(1); /* Full height */
}

:root .nb-bluelinenb-inactive {
        transition: all 0.5s ease;
    width: 2px;
        height: 37px;
    float: left;
    position: relative;
    top: -6px;
    left: 4px;
    background-color: #5e5e5e00 !important;
    transform-origin: center; /* Set the origin to the center */
    transform: scaleY(0.1); /* Full height */
}
:root .inactive-icon {
        fill: #808080 !important;
}

:root .nav-link {
    padding: 0px !important;
    margin-left: 11px;
    margin-bottom:2px;
}
</style>
@code {
    private string? currentUrl;
    private string myicon = "Home";

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        //Is this what is causing the breadcrum to not update?
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private string GetNavItemClass(string href)
    {
        if (string.IsNullOrEmpty(currentUrl) && href == "/")
        {
            return "";
        }
        else
        {
            if (currentUrl != null)
            {
                if (currentUrl.Contains(href, StringComparison.OrdinalIgnoreCase) || (currentUrl == "" && href == "Home"))
                {
                    return "nb-active";
                }
                else
                {
                    return "nb-inactive";
                }
            }
            else
            {
                return "nb-inactive";
            }
        }
    }

    private string GetIconClass(string href)
    {
        if (string.IsNullOrEmpty(currentUrl) && href == "")
        {
            return "";
        }
        else
        {
            if (currentUrl != null)
            {
                if (currentUrl.Contains(href, StringComparison.OrdinalIgnoreCase) || (currentUrl == "" && href == "Home"))
                {
                    return "active-icon";
                }
                else
                {
                    return "inactive-icon";
                }
            }
            else
            {
                return "inactive-icon";
            }
        }
    }


    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

@* 
<style>
    .custom-icon-color {
        color: #0078D4; /* Your desired default color */
    }
    .e-icons.e-medium {
        font-size: 20px !important;
    }
    .nav-link {
        position: relative;
        color:#000;
        padding: 0px;
    }

        .nav-link .selected-nav-item {
            color: #000;
        }

        .nav-link:hover::after {
            content: attr(title);
            position: absolute;
            left: 100%;
            margin-left: 8px;
            background: #333;
            color: #fff;
            padding: 4px 8px;
            border-radius: 4px;
            white-space: nowrap;
        }
</style>
 *@