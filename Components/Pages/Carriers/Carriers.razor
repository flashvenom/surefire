@page "/Carriers"
@using Mantis.Domain.Carriers.Models
@using Mantis.Domain.Carriers.Services
@using Mantis.Domain.Shared.Helpers
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject DataHelper DataHelper
@inject CarrierService CarrierService
@rendermode InteractiveServer

<FluentBreadcrumb>
    <FluentBreadcrumbItem Text="Carriers" Url="/Carriers" />
    <FluentBreadcrumbItem Text="Database" />
</FluentBreadcrumb>

<_toolbar CarrierId="@CarrierId" />

<div class="page-content-datagrid">
    <FluentDataGrid Items="@FilteredCarriers" ResizableColumns="true" Pagination="@pagination" OnRowDoubleClick="@((FluentDataGridRow<Carrier> row) => HandleRowDoubleClick(row))">
        <PropertyColumn Property="@(p => p.CarrierId)" Title="Id" Width="60px" Sortable="true" />
        <PropertyColumn Property="@(p => p.CarrierName)" Title="Name" Width="350px" Sortable="true" />
        <PropertyColumn Property="@(p => p.Phone)" Title="Phone" Sortable="true" />
        <PropertyColumn Property="@(p => p.Website)" Title="Website" Sortable="true" />
        <PropertyColumn Property="@(p => p.QuotingWebsite)" Title="Quoting URL" Sortable="true" />
        <PropertyColumn Property="@(p => p.StreetAddress)" Title="Street Address" Sortable="true" />
        <PropertyColumn Property="@(p => p.City)" Title="City" Sortable="true" />
        <PropertyColumn Property="@(p => p.State)" Title="State" Sortable="true" />
        <PropertyColumn Property="@(p => p.Wholesaler)" Title="MGA" Sortable="true" />
    </FluentDataGrid>
    <div class="search-container">
        <FluentSearch Placeholder="Search..." @bind-Value="SearchTerm" @oninput="HandleSearchInput" />
    </div>
    <FluentPaginator State="@pagination" />
</div>

@code {
    public IQueryable<Carrier> CarrierData { get; set; }
    public IQueryable<Carrier> FilteredCarriers { get; set; }
    public int CarrierId { get; set; }
    public string SearchTerm { get; set; } = string.Empty;
    PaginationState pagination = new PaginationState { ItemsPerPage = 18 };
    private System.Timers.Timer debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        CarrierData = CarrierService.GetAllCarriers();
        FilteredCarriers = CarrierData;
        debounceTimer = new System.Timers.Timer(300); // Debounce for 300ms
        debounceTimer.AutoReset = false; // Prevent multiple triggers
        debounceTimer.Elapsed += async (sender, e) =>
        {
            await InvokeAsync(ApplySearchFilter); // Apply the search filter after the debounce period
        };
    }

    private void HandleSearchInput(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (e.Value is string searchTerm)
        {
            SearchTerm = searchTerm;
            debounceTimer.Stop();
            debounceTimer.Start(); // Start the debounce timer
        }
    }


    private void ApplySearchFilter()
    {
        FilteredCarriers = string.IsNullOrWhiteSpace(SearchTerm)
        ? CarrierData
        : CarrierData.Where(c =>
              EF.Functions.Like(c.CarrierName.ToLower(), $"%{SearchTerm.ToLower()}%")
           || EF.Functions.Like(c.Phone.ToLower(), $"%{SearchTerm.ToLower()}%")
           || EF.Functions.Like(c.Website.ToLower(), $"%{SearchTerm.ToLower()}%")
           || EF.Functions.Like(c.StreetAddress.ToLower(), $"%{SearchTerm.ToLower()}%")
           || EF.Functions.Like(c.City.ToLower(), $"%{SearchTerm.ToLower()}%")
           || EF.Functions.Like(c.State.ToLower(), $"%{SearchTerm.ToLower()}%"));

        InvokeAsync(StateHasChanged); // Trigger UI refresh after filtering
    }

    private void HandleRowDoubleClick(FluentDataGridRow<Carrier> row)
    {
        if (row != null && row.Item != null)
        {
            var selectedCarrier = row.Item;
            CarrierId = selectedCarrier.CarrierId;
            NavigationManager.NavigateTo($"/Carriers/Details/{CarrierId}");
        }
    }
}
