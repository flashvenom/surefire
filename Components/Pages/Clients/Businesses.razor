@* @page "/clients/businesses"

@using Mantis.Data
@using Mantis.Domain.Clients.Models
@using Radzen.Blazor
@inject NavigationManager Navigation
@inject DataSource Data
@rendermode InteractiveServer

<div class="input-group mb-3">
    <RadzenIcon Icon="search" Size="50px" Style="font-size:32px;" />
    <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" class="form-control searchtweak" placeholder="Search" aria-label="Search" aria-describedby="basic-addon1">
</div>

<RadzenDataGrid TItem="Client" Data="@FilteredItems" AllowPaging="true" PageSize="15" AllowSorting="true" AllowColumnResize="true" RowClick="@OnRowClick">
    <Columns>
        <RadzenDataGridColumn TItem="Client" Property="Name" Title="Name" Width="300" />
        <RadzenDataGridColumn TItem="Client" Property="PhoneNumber" Title="Phone Number" />
        <RadzenDataGridColumn TItem="Client" Property="Address.AddressLine1" Title="Address Line 1" />
        <RadzenDataGridColumn TItem="Client" Property="Address.City" Title="City" />
        <RadzenDataGridColumn TItem="Client" Property="Address.State" Title="State" />
        <RadzenDataGridColumn TItem="Client" Property="Address.PostalCode" Title="Postal Code" />
        <RadzenDataGridColumn TItem="Client" Property="PrimaryContact.FirstName" Title="First Name" />
        <RadzenDataGridColumn TItem="Client" Property="PrimaryContact.LastName" Title="Last Name" />
        <RadzenDataGridColumn TItem="Client" Property="PrimaryContact.Email" Title="Email" />
    </Columns>
</RadzenDataGrid>

@code {
    IQueryable<Client>? items;
    string nameFilter = string.Empty;

    IQueryable<Client>? FilteredItems
    {
        get
        {
            if (string.IsNullOrWhiteSpace(nameFilter))
            {
                return items;
            }

            return items?.Where(x =>
                x.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase) ||
                (x.PhoneNumber != null && x.PhoneNumber.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase)) ||
                (x.Address.AddressLine1 != null && x.Address.AddressLine1.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase)) ||
                (x.Address.City != null && x.Address.City.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase)) ||
                (x.Address.State != null && x.Address.State.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase)) ||
                (x.Address.PostalCode != null && x.Address.PostalCode.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase)) ||
                (x.PrimaryContact.FirstName != null && x.PrimaryContact.FirstName.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase)) ||
                (x.PrimaryContact.LastName != null && x.PrimaryContact.LastName.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase)) ||
                (x.PrimaryContact.Email != null && x.PrimaryContact.Email.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase))
            );
        }
    }

    protected override async Task OnInitializedAsync()
    {
        items = (await Data.GetClientsAsync()).AsQueryable();
    }

    void OnRowClick(DataGridRowMouseEventArgs<Client> args)
    {
        Navigation.NavigateTo($"/clients/id/{args.Data.ClientId}");
    }
}
 *@