@page "/Clients"
@using Mantis.Domain.Clients.Models
@using Mantis.Domain.Clients.Services
@using Mantis.Domain.Shared.Helpers
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject DataHelper DataHelper
@inject ClientService ClientService
@rendermode InteractiveServer

@* Latest thought: It has something to do with the FluentList not getting the latest client data when it's loading... Like we need to null it out and reassign it or something. Or CHECK FOR is INITIALIZED or ISLOADING... or USE AfterRenderAsync to check for it??? *@

<SfBreadcrumb>
    <BreadcrumbItems>
        <BreadcrumbItem Text="Clients" Url="/Clients" />
        <BreadcrumbItem Text="Browse" />
    </BreadcrumbItems>
</SfBreadcrumb>

<_toolbar ClientId="@ClientId" ClientName="@SelectedClientName" />

<div class="page-content-datagrid">
    <div class="fluent-data-grid">
        <FluentDataGrid Items="@FilteredClients" ResizableColumns="true" Pagination="@pagination" ShowHover="true"
                        OnRowDoubleClick="@((FluentDataGridRow<Client> row) => HandleRowDoubleClick(row))"
                        OnRowClick="@((FluentDataGridRow<Client> row) => HandleRowClick(row))">
            <PropertyColumn Property="@(p => p.ClientId)" Title="Client Id" Width="60px" Sortable="true" />
            <PropertyColumn Property="@(p => p.Name)" Title="Name" Width="350px" Sortable="true" />
            <PropertyColumn Property="@(p => p.PhoneNumber)" Title="Phone Number" Sortable="true" />
            <PropertyColumn Property="@(p => p.Email)" Title="Email" Sortable="true" />
            <PropertyColumn Property="@(p => p.Website)" Title="Website" Sortable="true" />
            <PropertyColumn Property="@(p => p.LookupCode)" Title="Lookup Code" Sortable="true" />
        </FluentDataGrid>
        <div class="fluent-data-grid__bottombar">
            <div class="fluent-data-grid__pagination">
                <FluentPaginator State="@pagination" />
            </div>

            <div class="fluent-data-grid__search">
                <FluentSearch Placeholder="Search..." @bind-Value="SearchTerm" @oninput="HandleSearchInput" />
            </div>
        </div>
    </div>
</div>

@code {
    public IQueryable<Client> ClientData { get; set; }
    public IQueryable<Client> FilteredClients { get; set; }
    public int ClientId { get; set; }
    public string SelectedClientName { get; set; } = "";
    public string SearchTerm { get; set; } = string.Empty;
    PaginationState pagination = new PaginationState { ItemsPerPage = 18 };
    private System.Timers.Timer debounceTimer;
    bool SelectFromEntireRow = true;


    protected override async Task OnInitializedAsync()
    {
        ClientData = ClientService.GetAllClients();
        FilteredClients = ClientData;
        debounceTimer = new System.Timers.Timer(300); // Debounce for 300ms
        debounceTimer.AutoReset = false; // Prevent multiple triggers
        debounceTimer.Elapsed += async (sender, e) =>
        {
            await InvokeAsync(ApplySearchFilter); // Apply the search filter after the debounce period
        };
    }

    private void HandleSearchInput(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (e.Value is string searchTerm)
        {
            SearchTerm = searchTerm;
            debounceTimer.Stop();
            debounceTimer.Start(); // Start the debounce timer
        }
    }


    private void ApplySearchFilter()
    {
        FilteredClients = string.IsNullOrWhiteSpace(SearchTerm)
        ? ClientData
        : ClientData.Where(c =>
              EF.Functions.Like(c.Name.ToLower(), $"%{SearchTerm.ToLower()}%")
           || EF.Functions.Like(c.PhoneNumber.ToLower(), $"%{SearchTerm.ToLower()}%")
           || EF.Functions.Like(c.Email.ToLower(), $"%{SearchTerm.ToLower()}%")
           || EF.Functions.Like(c.Website.ToLower(), $"%{SearchTerm.ToLower()}%")
           || EF.Functions.Like(c.LookupCode.ToLower(), $"%{SearchTerm.ToLower()}%"));

        InvokeAsync(StateHasChanged); // Trigger UI refresh after filtering
    }

    private void HandleRowDoubleClick(FluentDataGridRow<Client> row)
    {
        if (row != null && row.Item != null)
        {
            var selectedClient = row.Item;
            ClientId = selectedClient.ClientId;
            NavigationManager.NavigateTo($"/Clients/Details/{ClientId}");
        }
    }

    private void HandleRowSelected(FluentDataGridRow<Client> row)
    {
        if (row != null && row.Item != null)
        {
            var selectedClient = row.Item;
            ClientId = selectedClient.ClientId;
            NavigationManager.NavigateTo($"/Clients/Details/{ClientId}");
        }
    }

    private void HandleRowClick(FluentDataGridRow<Client> row)
    {
        if (row != null && row.Item != null)
        {
            var selectedClient = row.Item;
            row.Class = "selected-row";
            SelectedClientName = row.Item.Name + ": ";
            ClientId = selectedClient.ClientId;
            StateHasChanged();
        }
    }
}
