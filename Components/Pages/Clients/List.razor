@page "/Clients/List"

@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Mantis.Domain.Clients.Models
@using Mantis.Domain.Clients.Services
@using Mantis.Domain.Policies.Models
@using Mantis.Domain.Renewals.Models
@using Microsoft.FluentUI.AspNetCore.Components
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Lists
@using Mantis.Data
@using Mantis.Domain.Renewals.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject RenewalService RenewalService
@inject CrmApiService CrmApiService
@inject ClientService ClientService
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer

<_toolbar />

<div class="page-content">
    <div class="sf-quicklist">
        <SfTextBox @ref=@SearchBox Placeholder="Type to search clients..." @bind-Value="searchTerm" @oninput="OnInputChanged" CssClass="search-input small-input" ShowClearButton="true" />
        <SfListView TItem="Client" DataSource="filteredClients" CssClass="client-list">
            <ListViewFieldSettings TValue="Client" Id="ClientId" Text="Name" />
            <ListViewEvents TValue="Client" Clicked="@ClickHandler" />
        </SfListView>
    </div>
    
    @if (selectedClient != null)
    {
    <div class="sf-selected">
        <div class="sf-header">
            <div class="client-header">
                @selectedClient.Name <br />
                <span class="client-address">
                    @selectedClient.Address.AddressLine1 @selectedClient.Address.AddressLine2 @selectedClient.Address.City, @selectedClient.Address.State @selectedClient.Address.PostalCode
                </span>
            </div>
                
            <div class="client-header-2">
                    
            </div>

            <div class="client-header-3">
                <span class="client-phone">@selectedClient.PhoneNumber</span><br />
                    <span class="client-email">@selectedClient.Email</span>
            </div>
        </div>

        <div class="sf-col-container">
            <div class="sf-col sf-col-1">
                    <h3>Current Policies</h3>
                    <SfSpinner @bind-Visible="@isLoadingCrmId"></SfSpinner>
                    <div class="policy-container">
                        @foreach (var policy in currentPolicies)
                        {
                            <div class="policy">
                                <div class="policy-header">
                                    <div>@policy.eType</div>
                                    <div>@policy.EffectiveDate.ToShortDateString() - @policy.ExpirationDate.ToShortDateString()</div>
                                </div>
                                <div class="policy-details">
                                    <div>@policy.Carrier?.CarrierName / @policy.Wholesaler?.CarrierName</div>
                                </div>
                                <div class="policy-details">
                                    <div>@policy.PolicyNumber</div>
                                    <div>@policy.Premium.ToString("C")</div>
                                </div>
                            </div>
                            <FluentButton OnClick="@((e) => EditPolicy(policy.PolicyId))">Edit Policy</FluentButton> <FluentButton OnClick="@((e) => CreateRenewal(policy.PolicyId))">Create Renewal</FluentButton>
                        }
                        <h4>Past Policies</h4>
                        <SfSpinner @bind-Visible="@isLoadingCrmId"></SfSpinner>
                        @foreach (var policy in pastPolicies)
                        {
                            <div class="past-policy">
                                <div class="sf-pp">@policy.eType</div>
                                <div>@policy.PolicyNumber</div>
                                <div>@policy.Carrier?.LookupCode</div>
                                <div>@policy.Wholesaler?.LookupCode</div>
                                <div class="sf-da">@policy.EffectiveDate.ToShortDateString()</div>
                                <div class="sf-da">@policy.ExpirationDate.ToShortDateString()</div>
                            </div>
                            
                        }
                        @if (clientPolicies != null)
                        {
                        <ul>
                            @foreach (var policy in clientPolicies)
                            {
                                <li>@policy.PolicyNumber - @policy.eType - @policy.EffectiveDate - @policy.ExpirationDate</li>
                            }
                        </ul>
                        }
                    </div>
            </div>@* sf-col-1 *@
            <div class="sf-col sf-col-2">
                <h3>Primary Contact</h3>
                    <strong>@selectedClient.PrimaryContact.FirstName @selectedClient.PrimaryContact.LastName</strong> <br />
                    @selectedClient.PrimaryContact.Phone<br />
                    <i>@selectedClient.PrimaryContact.Email</i><br />
                    

                    <h4 class="sf-toppad">Additional Contacts</h4>
                    @foreach (var contact in selectedClient.Contacts)
                    {
                        <li>@contact.FirstName @contact.LastName - @contact.Phone - @contact.Email</li>
                    }


                    <h4 class="sf-toppad">Additional Info</h4>
                    @selectedClient.Website
                
                
            </div>@* sf-col-2 *@
            <div class="sf-col sf-col-3">
                <h3>Technical Stuff</h3>
                    <p><strong>ID:</strong> @selectedClient.ClientId </p>
                    <p><strong>LookupCode:</strong> @selectedClient.LookupCode</p>
                    <p><strong>eClientId:</strong> @selectedClient.eClientId</p>
                    <p>
                        <strong>eClientId-New:</strong>
                        @if (isLoadingCrmId)
                        {
                            <span class="loading-spinner"></span> <!-- Add CSS for spinner -->
                        }
                        else if (string.IsNullOrEmpty(crmClientId))
                        {
                            <span>Loading...</span>
                        }
                        else
                        {
                            <span>@crmClientId</span>
                        }
                    </p>
                    <p><strong>Loading:</strong> @isLoadingCrmId.ToString()</p>
                    <p><strong>Server Status:</strong> @isLoadingWhat</p>

            </div>@* sf-col-3 *@
        </div>
    </div>
    }
    <div style="clear:both;"></div>
</div>

<style>
    .page-content {
        display: flex;
        flex-direction: row;
    }
    :root .e-input:not(:valid), .e-input:valid, .e-float-input.e-control-wrapper input:not(:valid), .e-float-input.e-control-wrapper input:valid, .e-float-input input:not(:valid), .e-float-input input:valid, .e-input-group input:not(:valid), .e-input-group input:valid, .e-input-group.e-control-wrapper input:not(:valid), .e-input-group.e-control-wrapper input:valid, .e-float-input.e-control-wrapper textarea:not(:valid), .e-float-input.e-control-wrapper textarea:valid, .e-float-input textarea:not(:valid), .e-float-input textarea:valid, .e-input-group.e-control-wrapper textarea:not(:valid), .e-input-group.e-control-wrapper textarea:valid, .e-input-group textarea:not(:valid), .e-input-group textarea:valid {
        font-size: 14px !important;
        height: 5px !important;
        background-color: none !important;
    }

    :root .sf-quicklist .e-listview {
        padding: 0px !important;
        margin: 0px !important;
    }
        :root .e-listview .e-list-item {
            padding: 0px !important;
            margin: 0px !important;
            height: 25px !important;
        }
    .search-input.small-input {
        font-size: 0.875em; /* Adjust font size */
        padding: 0.5em; /* Adjust padding */
        border: 0px;
    }
</style>

@code {
    private string searchTerm = string.Empty;
    private List<Client> clients = new();
    private List<Client> filteredClients = new();
    private System.Timers.Timer debounceTimer;
    private Client selectedClient;
    private string crmClientId = string.Empty;
    private List<Policy> clientPolicies = new();
    private List<Policy> currentPolicies = new();
    private List<Policy> pastPolicies = new();
    private bool isLoadingCrmId = false;
    private string isLoadingWhat = "Initializing";
    SfTextBox SearchBox { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        debounceTimer = new System.Timers.Timer(100);
        debounceTimer.AutoReset = false;
        debounceTimer.Elapsed += (sender, args) => FilterClients();

        clients = await Http.GetFromJsonAsync<List<Client>>("https://localhost:7074/api/Client");
        filteredClients = new List<Client>(clients);
    }

    private async void AddDateIcon()
    {
        if (SearchBox != null)
        {
            //Add icon to the TextBox
            await SearchBox.AddIconAsync("append", "e-icons e-date-icon");
        }
    }

    private async void EditPolicy(int policyid)
    {
        Console.WriteLine("editing policy " + policyid);
        //await RenewalService.UpdateTaskHighlight(taskid, task.IsHighlighted);
    }

    private async Task CreateRenewal(int policyid)
    {
        Console.WriteLine("create renewal for " + policyid);
        var renewal = await RenewalService.CreateRenewalFromPolicy(policyid);
        //var renewal = await RenewalService.GetRenewalByPolicyId(policyid);
        int renewalid = renewal.RenewalId;
        Navigation.NavigateTo($"/Renewals/{renewalid}");
    }

    private void OnInputChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        debounceTimer.Stop();
        debounceTimer.Start();
    }

    private async void ClickHandler(ClickEventArgs<Client> args)
    {
        try
        {
            currentPolicies.Clear();
            pastPolicies.Clear();
            clientPolicies.Clear();
            InvokeAsync(StateHasChanged);
            isLoadingWhat += ".";
            var clientId = filteredClients[args.Index].ClientId;
            selectedClient = await Http.GetFromJsonAsync<Client>($"https://localhost:7074/api/Client/{clientId}");
            if (selectedClient.eClientId == null)
            {
                isLoadingCrmId = true;
                isLoadingWhat += ".:";
                InvokeAsync(StateHasChanged);
                await LoadCrmClientIdAndPolicies(selectedClient.LookupCode);
            }
            // Separate and sort policies
            SortAndSeparatePolicies();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"ClientId is null or error fetching client data: {ex.Message}");
        }
        finally
        {
            isLoadingWhat += ".";
            InvokeAsync(StateHasChanged);
        }
    }
    private async Task LoadCrmClientIdAndPolicies(string lookupCode)
    {
        
        crmClientId = string.Empty;
        clientPolicies.Clear();
        try
        {
            isLoadingWhat += ".";
            var accessToken = await CrmApiService.GetAccessTokenAsync();
            var jsonResponse = await CrmApiService.GetClientDetailsAsync(lookupCode, accessToken);
            var clientData = JsonConvert.DeserializeObject<Dictionary<string, object>>(jsonResponse);
            isLoadingWhat += ".";
            InvokeAsync(StateHasChanged);
            if (clientData != null && clientData.ContainsKey("_embedded"))
            {
                var embeddedData = JsonConvert.DeserializeObject<Dictionary<string, object>>(clientData["_embedded"].ToString());
                if (embeddedData != null && embeddedData.ContainsKey("clients"))
                {
                    var clientsList = JsonConvert.DeserializeObject<List<Dictionary<string, object>>>(embeddedData["clients"].ToString());
                    if (clientsList != null && clientsList.Count > 0)
                    {
                        crmClientId = clientsList[0]["id"].ToString();
                        await LoadClientPolicies(crmClientId, accessToken);
                        isLoadingWhat += ".";
                        InvokeAsync(StateHasChanged);
                    }
                }
            }

            //Update the database
            await ClientService.UpdateClientIdAndPolicies(selectedClient.ClientId, crmClientId, clientPolicies, accessToken);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading CRM client ID and policies: {ex.Message}");
        }
        finally
        {
            isLoadingCrmId = false;
            SortAndSeparatePolicies();
            isLoadingWhat = "Done!";
            InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task LoadClientPolicies(string clientId, string accessToken)
    {
        try
        {
            var jsonResponse = await CrmApiService.GetClientPoliciesAsync(clientId, accessToken);
            isLoadingWhat += ".";
            InvokeAsync(StateHasChanged);
            var policyData = JsonConvert.DeserializeObject<JObject>(jsonResponse);

            if (policyData != null && policyData["_embedded"] != null)
            {
                var embeddedData = policyData["_embedded"] as JObject;
                if (embeddedData != null && embeddedData["policies"] != null)
                {
                    var policiesList = embeddedData["policies"].ToObject<List<JObject>>();
                    clientPolicies = policiesList.Select(p => new Policy
                        {
                            PolicyNumber = p["policyNumber"]?.ToString(),
                            ePolicyId = p["id"]?.ToString(),
                            eType = p["policyType"]?["description"]?.ToString(),
                            eTypeCode = p["policyType"]?["code"]?.ToString(),
                            Notes = p["description"]?.ToString(),
                            EffectiveDate = p["effectiveOn"] != null ? DateTime.Parse(p["effectiveOn"].ToString()) : DateTime.MinValue,
                            ExpirationDate = p["expirationOn"] != null ? DateTime.Parse(p["expirationOn"].ToString()) : DateTime.MinValue,
                            Premium = p["estimatedPremium"] != null ? decimal.Parse($"{p["estimatedPremium"]["units"]}.{p["estimatedPremium"]["partialUnits"]}") : 0m
                        }).ToList();
                }
            }
            SortAndSeparatePolicies();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading client policies: {ex.Message}");
        }
        finally
        {
            InvokeAsync(StateHasChanged);
            isLoadingWhat += ".";
        }
    }
    private void SortAndSeparatePolicies()
    {
        var today = DateTime.Today;

        currentPolicies = selectedClient.Policies
            .Where(p => p.EffectiveDate <= today && p.ExpirationDate >= today)
            .OrderByDescending(p => p.EffectiveDate)
            .ToList();

        pastPolicies = selectedClient.Policies
            .Where(p => p.ExpirationDate < today)
            .OrderByDescending(p => p.EffectiveDate)
            .ToList();
    }
    private void FilterClients()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredClients = new List<Client>(clients);
        }
        else
        {
            filteredClients = clients
                .Where(client => client.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
}
