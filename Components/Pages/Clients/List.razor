@page "/Clients/List"
@page "/Clients/List/{ClientId:int}"

@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Mantis.Domain.Clients.Models
@using Mantis.Domain.Clients.Services
@using Mantis.Domain.Policies.Models
@using Mantis.Domain.Policies.Components
@using Mantis.Domain.Renewals.Models
@using Mantis.Components.Shared
@using Microsoft.FluentUI.AspNetCore.Components
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Lists
@using Mantis.Data
@using Mantis.Domain.Renewals.Services
@using Mantis.Domain.Shared.Helpers
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject NavigationService NavigationService
@inject RenewalService RenewalService
@inject CrmApiService CrmApiService
@inject ClientService ClientService
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer

<div @onmouseleave="() => ExpandDetails(true)">

    <SfBreadcrumb>
        <BreadcrumbItems>
            <BreadcrumbItem Text="Clients" Url="/Clients" />
            <BreadcrumbItem Text="List" />
            <BreadcrumbItem Text="View" />
        </BreadcrumbItems>
    </SfBreadcrumb>

    @if (selectedClient != null)
    {
        <_toolbar ClientId="selectedClient.ClientId" OnNewPolicy="@SetShowCreatePolicy" />
    }

    <div class="page-content" >
        <div class="mf-flexrow">
            <div class="@dynamicClass">
                <FluentTextField @bind-Value="searchTerm" @oninput="OnInputChanged" Placeholder="Search for a client..." Class="sf-searchquick">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Search())" Slot="start" Color="Color.Neutral" />
                </FluentTextField>
                <SfListView TItem="Client" DataSource="filteredClients" CssClass="client-list">
                    <ListViewFieldSettings TValue="Client" Id="ClientId" Text="Name" />
                    <ListViewEvents TValue="Client" Clicked="@ClickHandler" />
                </SfListView>
            </div>
        </div>

        @if (selectedClient != null)
        {
            <div class="sf-selected">
                <div class="tinyexpander" @onclick="() => ExpandDetails()"><img src="/img/tinyexpand.png" /></div>
                <div class="sf-header">
                    <div class="client-header">
                        @selectedClient.Name <br />
                        <span class="client-address">
                            <span class="map-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Location())" Slot="start" CustomColor="#8d8d8d" Color="Color.Custom" /></span>
                            @selectedClient.Address.AddressLine1 @selectedClient.Address.AddressLine2 @selectedClient.Address.City, @selectedClient.Address.State @selectedClient.Address.PostalCode
                        </span>
                    </div>

                    <div class="client-header-2">
                    </div>

                    <div class="client-header-3">
                        <span class="client-phone">@*<span class="phone-icon"><FluentIcon Value="@(new Icons.Regular.Size48.Phone())" Slot="start" CustomColor="#8d8d8d" Color="Color.Custom" /></span>  *@ @DateHelper.FormatPhoneNumber(selectedClient.PhoneNumber)</span><br />
                        <span class="client-email"><span class="email-icon"><FluentIcon Value="@(new Icons.Regular.Size24.Mail())" Slot="start" CustomColor="#8d8d8d" Color="Color.Custom" /></span> @selectedClient.Email</span>
                    </div>
                </div>
                <div class="clientlist-tabcontainer">
                    <FluentTabs @ref="tabInterface" Size="TabSize.Large">
                        <FluentTab Id="tab-1" Label="Overview" Class="sf-tab">
                            <div class="sf-col-container">
                                <div class="sf-col sf-col-1">
                                    <div class="txt-section">Current Policies</div>
                                    <SfSpinner @bind-Visible="@isLoadingCrmId"></SfSpinner>
                                    <div class="policy-container">
                                        @foreach (var policy in currentPolicies)
                                        {
                                            <div class="@GetPolicyClass(policy.PolicyId)" @onclick="() => ToggleExpand(policy.PolicyId)">
                                                <div class="policy-header">
                                                    <div>@policy.Product?.LineName <span style="font-size:7px;">@policy.PolicyId</span></div>
                                                    <div>@policy.EffectiveDate.ToShortDateString() - @policy.ExpirationDate.ToShortDateString()</div>
                                                </div>
                                                <div class="policy-details">
                                                    <div>@policy.Carrier?.CarrierName / @policy.Wholesaler?.CarrierName</div>
                                                </div>
                                                <div class="policy-details">
                                                    <div>@policy.PolicyNumber</div>
                                                    <div>@policy.Premium.ToString("C")</div>
                                                </div>
                                                <div class="additional-links" style="@GetLinksStyle(policy.PolicyId)" id="links-@policy.PolicyId">
                                                    <a class="smalltool" href="/Policies/Details/@(policy.PolicyId)"><FluentIcon Class="smallicon" Value="@(new Icons.Regular.Size16.Open())" Color="Color.Fill" />Open Policy</a>
                                                    <a class="smalltool" href="/Policies/Edit/@(policy.PolicyId)"><FluentIcon Class="smallicon" Value="@(new Icons.Regular.Size16.Edit())" Color="Color.Fill" />Edit Policy</a>
                                                    <a class="smalltool" href="#" @onclick="@((e) => CreateRenewal(policy.PolicyId))"><FluentIcon Class="smallicon" Value="@(new Icons.Regular.Size16.ArrowRepeatAll())" Color="Color.Fill" />Create Renewal</a>
                                                </div>
                                            </div>
                                        }

                                    </div>
                                </div>@* sf-col-1 *@

                                <div class="sf-col sf-col-2">
                                    <div class="txt-section">Primary Contact</div>
                                    <div class="mf-flexrow">
                                        <div class="mf-sm">
                                            <FluentPersona Initials="KS" ImageSize="55px" Class="pinitials" Style="font-size:1.5em; font-weight:100; font-family: montserrat, sans-serif;" />
                                        </div>
                                        <div class="mf-item-sm contactcard">
                                            <span class="txt-bold-md">@selectedClient.PrimaryContact.FirstName  @selectedClient.PrimaryContact.LastName</span>
                                            <a href="Contacts/Edit/@selectedClient.PrimaryContact.ContactId"><span class="e-btnhover e-icons e-pencil-icon"></span></a><br />
                                            <span class="txt-p">@selectedClient.PrimaryContact.Phone</span><br />
                                            <i class="txt-cursive-sm">@selectedClient.PrimaryContact.Email</i>
                                        </div>
                                    </div>

                                    <h4 class="sf-toppad">Additional Contacts</h4>
                                    <ContactsListAll Contacts="@selectedClient.Contacts" ParentType="Client" ParentId="@selectedClient.ClientId" />
                                    <h4 class="sf-toppad">Additional Info</h4>
                                    <FluentIcon Class="smallicon" Value="@(new Icons.Regular.Size24.Globe())" Color="Color.Neutral" /> <a href="@("https://" + selectedClient.Website)" target="_blank" class="txt-bold-md">@selectedClient.Website</a>
                                </div>@* sf-col-2 *@

                                <div class="sf-col sf-col-3">

                                    <div class="txt-section">Technical Stuff</div>
                                    <div class="txt-bold-md">Client Code</div>
                                    <div class="txt-p-lg">@selectedClient.LookupCode</div>
                                    <br />
                                    <div class="txt-bold-md">Client Id</div>
                                    <div class="txt-p-lg">@selectedClient.ClientId</div>
                                    <div class="txt-small">@selectedClient.eClientId</div>
                                    <br />
                                    <div class="txt-bold-md">Debug</div>
                                        @if (isLoadingCrmId)
                                        {
                                            <span class="txt-small">@isLoadingCrmId.ToString()</span>
                                            <span class="loading-spinner"></span>
                                        }
                                        else if (string.IsNullOrEmpty(crmClientId))
                                        {
                                            <span class="txt-small">Loading...</span>
                                        }
                                        else
                                        {
                                            <span class="txt-small">@crmClientId </span>
                                        <span class="txt-small">@isLoadingWhat</span>
                                        }
                                </div>@* sf-col-3 *@

                            </div>
                        </FluentTab>
                        <FluentTab Id="tab-2" Label="Policies" Class="sf-tab">
                            <div class="tabcontents">
                                @if (showCreatePolicy == true){
                                    <CreatePolicyForClient ClientId="ClientId" OnCloseCreatePolicy="@SetHideCreatePolicy" />
                                }
                                else
                                {
                                    <CurrentPoliciesList currentPolicies="currentPolicies" />
                                    <div style="height:25px;"></div>
                                    <PastPoliciesList pastPolicies="pastPolicies" />
                                    @if (clientPolicies != null) { <span>Fetched @(clientPolicies.Count) policies from external source!</span> }
                                }

                                
                            </div>
                        </FluentTab>
                        <FluentTab Id="tab-3" Label="Attachments" Class="sf-tab">
                            <div class="tabcontents">
                                <div class="txt-section">Attachments</div>
                                <div class="txt-p">Check back later.</div>
                            </div>
                        </FluentTab>
                        <FluentTab Id="tab-4" Label="Certificates" Class="sf-tab">
                            <div class="tabcontents">
                                <div class="txt-section">Certificates</div>
                                <_Certificates client="selectedClient" />
                            </div>
                        </FluentTab>
                    </FluentTabs>
                    <SfSpinner @bind-Visible="@isLoadingCrmId"></SfSpinner>
                </div>
            </div>
        }
        <div style="clear:both;"></div>
    </div>
</div>
<style>
    :root .smallbutton {
        font-size: .6em !important;
        padding: 0px 0px !important;
        margin: 0px 0px !important;
        width: 50px;
    }

    :root .sf-tab {
        background-color: #fff;
        border-radius: 5px;
        line-height: 1.1;
    }

    :root .smallicon {
        position: relative !important;
        top: 3px !important;
        left: -2px !important;
    }

    .page-content {
        display: flex;
        flex-direction: row;
    }

    .tinyexpander {
        position: absolute;
        top: 0px;
        left: 0px;
        opacity: .3;
    }

        .tinyexpander:hover {
            opacity: 1;
            cursor: pointer;
        }

    :root .sf-quicklist {
        width: 300px !important;
        overflow: hidden;
        transition: all 0.5s ease;
    }

    :root .sf-quicklist-close {
        width: 1px !important;
        overflow: hidden;
        transition: all 0.5s ease;
    }

    :root .sf-quicklist .e-listview {
        padding: 0px !important;
        margin: 0px !important;
    }

    :root .e-listview .e-list-item {
        padding: 0px !important;
        margin: 0px !important;
        height: 25px !important;
    }

    :root .sf-collapse {
        width: 15px;
        background-color: #e2e2e2;
        height: 100%;
        float: right;
    }

    :root .sf-searchquick {
        width: 290px !important
    }
</style>

@code {
    [Parameter, SupplyParameterFromQuery]
    public int ClientId { get; set; } = 91;
    private HashSet<int> expandedPolicies = new HashSet<int>();

    [Parameter]
    public bool showCreatePolicy { get; set; } = false;

    private int activeTabIndex = 0; // Default to the first tab



    private FluentTabs tabInterface { get; set; }
    private string searchTerm = string.Empty;
    private List<Client> clients = new();
    private List<Client> filteredClients = new();
    private List<Policy> clientPolicies = new();
    private List<Policy> currentPolicies = new();
    private List<Policy> pastPolicies = new();

    private System.Timers.Timer debounceTimer;
    private bool isLoadingCrmId = false;
    private string crmClientId = string.Empty;
    private string isLoadingWhat = "Initializing";
    private string dynamicClass = "sf-quicklist";
    private Client selectedClient { get; set; }

    SfTextBox SearchBox { get; set; }

    protected override async Task OnInitializedAsync()
    {
        debounceTimer = new System.Timers.Timer(100);
        debounceTimer.AutoReset = false;
        debounceTimer.Elapsed += (sender, args) => FilterClients();

        selectedClient = await ClientService.GetClientById(ClientId);
        SortAndSeparatePolicies();

        clients = await Http.GetFromJsonAsync<List<Client>>("https://mantismetro.azurewebsites.net/api/Client");
        filteredClients = new List<Client>(clients);

        Console.WriteLine("INITIALIZED------------------------------------------------------");
    }

    //Update Breakcrcum

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("bc------------=======================----------");

        BreadcrumbService.UpdateBreadcrumb(new List<BreadcrumbItem>
        {
            new BreadcrumbItem { Text = "Home", Url = "/" },
            new BreadcrumbItem { Text = "ClientList" }
        });


    }

    private void SetShowCreatePolicy()
    {
        Console.WriteLine("set tab");
        
        tabInterface.GoToTabAsync("tab-2");
        showCreatePolicy = true;
    }
    private void SetHideCreatePolicy()
    {
        showCreatePolicy = false;
    }
    private void ShowCreatePolicy()
    {
        showCreatePolicy = true;
    }
    private void HideCreatePolicy()
    {
        showCreatePolicy = true;
    }

    private async void EditPolicy(int policyid)
    {
        Navigation.NavigateTo($"/Policy/Edit/{policyid}");
    }
    public void Dispose()
    {
        debounceTimer?.Dispose();

    }

    public void ExpandDetails(bool? forceOpen = null)
    {
        if (forceOpen.HasValue)
        {
            dynamicClass = forceOpen.Value ? "sf-quicklist" : "sf-quicklist-close";
        }
        else
        {
            dynamicClass = dynamicClass == "sf-quicklist" ? "sf-quicklist-close" : "sf-quicklist";
        }
    }

    private async Task CreateRenewal(int policyid)
    {
        var renewal = await RenewalService.CreateRenewalFromPolicy(policyid);
        int renewalid = renewal.RenewalId;
        Navigation.NavigateTo($"/Renewals/{renewalid}");
    }

    private void OnInputChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        debounceTimer.Stop();
        debounceTimer.Start();
    }

    private async void ClickHandler(ClickEventArgs<Client> args)
    {
        ClientId = filteredClients[args.Index].ClientId;
        selectedClient = await ClientService.GetClientById(ClientId);
        searchTerm = "";
        debounceTimer.Stop();
        debounceTimer.Start();

        //Get policies if we haven't fetched them from the API before
        if (selectedClient.eClientId == null)
        {
            isLoadingCrmId = true;
            isLoadingWhat += ".:";
            await LoadCrmClientIdAndPolicies(selectedClient.LookupCode, selectedClient.ClientId);
        }

        // Separate and sort policies
        NavigationService.SetLastClientPage("/Clients/List/" + ClientId);
        ExpandDetails(false);
        SortAndSeparatePolicies();
        //NavigationManager.NavigateTo($"/Clients/List/{ClientId}", forceLoad: false);
    }

    private async Task LoadCrmClientIdAndPolicies(string lookupCode, int clientid)
    {
        //API Call
        crmClientId = string.Empty;
        try
        {
            isLoadingWhat += ".";
            var accessToken = await CrmApiService.GetAccessTokenAsync();
            var jsonResponse = await CrmApiService.GetClientDetailsAsync(lookupCode, accessToken);
            var clientData = JsonConvert.DeserializeObject<Dictionary<string, object>>(jsonResponse);
            isLoadingWhat += "$";
            if (clientData != null && clientData.ContainsKey("_embedded"))
            {
                var embeddedData = JsonConvert.DeserializeObject<Dictionary<string, object>>(clientData["_embedded"].ToString());
                if (embeddedData != null && embeddedData.ContainsKey("clients"))
                {
                    var clientsList = JsonConvert.DeserializeObject<List<Dictionary<string, object>>>(embeddedData["clients"].ToString());
                    if (clientsList != null && clientsList.Count > 0)
                    {
                        crmClientId = clientsList[0]["id"].ToString();
                        await LoadClientPolicies(crmClientId, accessToken);
                        isLoadingWhat += "%";
                    }
                }
            }

            //Update the database
            await ClientService.UpdateClientIdAndPolicies(selectedClient.ClientId, crmClientId, clientPolicies, accessToken);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading CRM client ID and policies: {ex.Message}");
        }
        finally
        {
            isLoadingCrmId = false;
            isLoadingWhat = "Done!";
            await InvokeAsync(StateHasChanged);
            NavigationManager.NavigateTo("Clients/List/" + clientid);
        }
    }

    private async Task LoadClientPolicies(string clientId, string accessToken)
    {
        try
        {
            var jsonResponse = await CrmApiService.GetClientPoliciesAsync(clientId, accessToken);
            isLoadingWhat += "^";
            var policyData = JsonConvert.DeserializeObject<JObject>(jsonResponse);

            if (policyData != null && policyData["_embedded"] != null)
            {
                var embeddedData = policyData["_embedded"] as JObject;
                if (embeddedData != null && embeddedData["policies"] != null)
                {
                    var policiesList = embeddedData["policies"].ToObject<List<JObject>>();
                    clientPolicies = policiesList.Select(p => new Policy
                        {
                            PolicyNumber = p["policyNumber"]?.ToString(),
                            ePolicyId = p["id"]?.ToString(),
                            eType = p["policyType"]?["description"]?.ToString(),
                            eTypeCode = p["policyType"]?["code"]?.ToString(),
                            Notes = p["description"]?.ToString(),
                            EffectiveDate = p["effectiveOn"] != null ? DateTime.Parse(p["effectiveOn"].ToString()) : DateTime.MinValue,
                            ExpirationDate = p["expirationOn"] != null ? DateTime.Parse(p["expirationOn"].ToString()) : DateTime.MinValue,
                            Premium = p["estimatedPremium"] != null ? decimal.Parse($"{p["estimatedPremium"]["units"]}.{p["estimatedPremium"]["partialUnits"]}") : 0m
                        }).ToList();
                }
            }
            SortAndSeparatePolicies();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading client policies: {ex.Message}");
        }
        finally
        {
            isLoadingWhat += "*";
            await InvokeAsync(StateHasChanged);
        }
    }

    private void SortAndSeparatePolicies()
    {
        var today = DateTime.Today;

        currentPolicies = selectedClient.Policies
            .Where(p => p.EffectiveDate <= today && p.ExpirationDate >= today)
            .OrderByDescending(p => p.EffectiveDate)
            .ToList();

        pastPolicies = selectedClient.Policies
            .Where(p => p.ExpirationDate < today)
            .OrderByDescending(p => p.EffectiveDate)
            .ToList();

        isLoadingWhat = "X";
        StateHasChanged();
    }

    private async Task FilterClients()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredClients = new List<Client>(clients);
        }
        else
        {
            filteredClients = clients
                .Where(client => client.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        await InvokeAsync(StateHasChanged);
    }

    

    // Policy Expansion Methods
    private void ToggleExpand(int policyId)
    {
        if (expandedPolicies.Contains(policyId))
        {
            expandedPolicies.Remove(policyId);
        }
        else
        {
            expandedPolicies.Add(policyId);
        }
    }

    private string GetPolicyClass(int policyId)
    {
        return expandedPolicies.Contains(policyId) ? "policy expanded" : "policy";
    }

    private string GetLinksStyle(int policyId)
    {
        return expandedPolicies.Contains(policyId) ? "display: block;" : "display: block;";
    }

}
