@namespace Mantis.Components.Pages.Clients
@using Microsoft.FluentUI.AspNetCore.Components
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using Microsoft.AspNetCore.Components.Routing
@using Mantis.Domain.Shared
@using Mantis.Domain.Forms.Services
@inject NavigationService NavigationService
@inject NavigationManager NavigationManager
@inject FormService FormService

<div class="page-toolbar">
@*     <SfButton @onclick="@((args) => NavigateToRenewalCreate())" CssClass="e-primary" IconCss="e-icons e-plus-icon">New Client</SfButton>
    *@  
    <FluentMenuButton Text="Create New" OnMenuChanged="HandleOnMenuChanged">
        <FluentMenuItem Id="0078D4">Client</FluentMenuItem>
        <FluentMenuItem Id="464EB8">Contact</FluentMenuItem>
        <FluentMenuItem Id="8661C5">Certificate</FluentMenuItem>
        <FluentMenuItem Id="0066FF">Policy</FluentMenuItem>

    </FluentMenuButton>

    <span class="sf-verthr"></span>

    <NavLink class="toolbar-link" href="@NavigationService.GetLastClientPage()" Match="NavLinkMatch.Prefix">
        <FluentIcon Value="@(new Icons.Regular.Size24.Book())" />
        <span class="toolbar-text">Browse</span>
    </NavLink>

    <NavLink class="toolbar-link" href="/Clients" Match="NavLinkMatch.Prefix">
        <FluentIcon Value="@(new Icons.Regular.Size24.Database())" />
        <span class="toolbar-text">Data</span>
    </NavLink>

    <span class="sf-verthr2"></span>

    @if (ClientId != 0)
    {
        <NavLink class="toolbar-link" href="@("Clients/Edit/" + ClientId)" Match="NavLinkMatch.Prefix">
            <FluentIcon Value="@(new Icons.Regular.Size24.PenSparkle())" />
            <span class="toolbar-text">Edit</span>
        </NavLink>
    }

</div>

@code {
    [Parameter]
    public int ClientId { get; set; }

    private void NavigateToRenewalCreate()
    {
        NavigationManager.NavigateTo("/Clients/Create");
    }
    private void HandleOnMenuChanged(MenuChangeEventArgs args)
    {
        string oksss = "what";
    }

    private void NewContact()
    {
        NavigationManager.NavigateTo($"/Contacts/Create?ParentType=Client&ParentId={ClientId}");
    }

    private void NewClient()
    {
        NavigationManager.NavigateTo($"/Client/Create");
    }

    private async Task NewCertificate()
    {
        int newcertid = await FormService.CreateCertificate(ClientId);
        NavigationManager.NavigateTo($"/Forms/Certificate/{newcertid}");
    }


}