@page "/Locations"
@using Mantis.Domain.Shared
@using Mantis.Domain.Shared.Helpers
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor
@inject DataHelper DataHelper
@rendermode InteractiveServer

<SfBreadcrumb>
    <BreadcrumbItems>
        <BreadcrumbItem Text="Locations" Url="/Locations" />
        <BreadcrumbItem Text="Database" />
    </BreadcrumbItems>
</SfBreadcrumb>

<div class="page-toolbar">
    <SfButton CssClass="e-primary" IconCss="e-icons e-plus-icon">New Location</SfButton>
</div>

<div class="page-content-datagrid">
    <SfGrid @ref="Grid" DataSource="@AddressData" AllowPaging="true" AllowSorting="true" ShowColumnChooser="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Search", "Cancel", "ColumnChooser" })">
        <SfDataManager Url="@getUrl" InsertUrl="@insertUrl" UpdateUrl="@updateUrl" RemoveUrl="@deleteUrl" Adaptor="Adaptors.UrlAdaptor"></SfDataManager>
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"></GridEditSettings>
        <GridPageSettings PageSize="12"></GridPageSettings>
        <GridColumns>
            <GridColumn Field=@nameof(Address.AddressId) HeaderText="Id" ValidationRules="@(new ValidationRules{ Required= true })" IsPrimaryKey="true" IsIdentity="true" Visible="false"></GridColumn>
            <GridColumn Field=@nameof(Address.AddressLine1) HeaderText="Address 1" Width="400"></GridColumn>
            <GridColumn Field=@nameof(Address.AddressLine2) HeaderText="Address 2"></GridColumn>
            <GridColumn Field=@nameof(Address.City) HeaderText="City"></GridColumn>
            <GridColumn Field=@nameof(Address.State) HeaderText="State"></GridColumn>
            <GridColumn Field=@nameof(Address.PostalCode) HeaderText="Zip"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>
@code {
    SfGrid<Address> Grid { get; set; }
    SfDataManager DataManager { get; set; }
    public List<Address> AddressData { get; set; }
    private string getUrl;
    private string insertUrl;
    private string updateUrl;
    private string deleteUrl;

    protected override void OnInitialized()
    {
        // Construct the URLs dynamically using the base URL from configuration
        var baseUrl = DataHelper.GetBaseUrl();
        getUrl = $"{baseUrl}/api/Address";
        insertUrl = $"{baseUrl}/api/Address/Insert";
        updateUrl = $"{baseUrl}/api/Address/Update";
        deleteUrl = $"{baseUrl}/api/Address/Delete";
    }
}