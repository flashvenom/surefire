@using Mantis.Domain.Policies.Models
@using Mantis.Domain.Policies.Services
@using Mantis.Domain.Shared.Services
@using Mantis.Domain.Shared.Models
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.InPlaceEditor
@inject PolicyService PolicyService
@inject AttachmentService AttachmentService
@rendermode InteractiveServer

@if (Policy is null || Policy.GeneralLiabilityCoverage is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentGrid>
        <FluentGridItem xs="3">
            <span class="pol-section-title">policy limits</span><br />
            <span class="pol-name">Each Occurrence</span>
            <span class="pol-value">
                <SfInPlaceEditor @bind-Value="@GeneralLiabilityCoverage.EachOccurrence" Type="Syncfusion.Blazor.InPlaceEditor.InputType.Numeric" TValue="int?" EditableOn="EditableType.EditIconClick" ShowButtons="false" EmptyText="No Coverage">
                    <EditorComponent>
                        <SfNumericTextBox Format="c0" @bind-Value="@GeneralLiabilityCoverage.EachOccurrence"></SfNumericTextBox>
                    </EditorComponent>
                    <InPlaceEditorEvents OnActionBegin="@(args => UpdateCoverageNow(GeneralLiabilityCoverage))" TValue="int?"></InPlaceEditorEvents>
                </SfInPlaceEditor>
            </span><br />


            <span class="pol-name">Damage to Premises</span>
            <span class="pol-value">
                <SfInPlaceEditor @bind-Value="@GeneralLiabilityCoverage.DamageToPremises" Type="Syncfusion.Blazor.InPlaceEditor.InputType.Numeric" TValue="int?" EditableOn="EditableType.EditIconClick" ShowButtons="false" EmptyText="No Coverage">
                    <EditorComponent>
                        <SfNumericTextBox Format="c0" @bind-Value="@GeneralLiabilityCoverage.DamageToPremises"></SfNumericTextBox>
                    </EditorComponent>
                    <InPlaceEditorEvents OnActionBegin="@(args => UpdateCoverageNow(GeneralLiabilityCoverage))" TValue="int?"></InPlaceEditorEvents>
                </SfInPlaceEditor>
            </span><br />


            <span class="pol-name">Medical Expenses</span>
            <span class="pol-value">
                <SfInPlaceEditor @bind-Value="@GeneralLiabilityCoverage.MedicalExpenses" Type="Syncfusion.Blazor.InPlaceEditor.InputType.Numeric" TValue="int?" EditableOn="EditableType.EditIconClick" ShowButtons="false" EmptyText="No Coverage">
                    <EditorComponent>
                        <SfNumericTextBox Format="c0" @bind-Value="@GeneralLiabilityCoverage.MedicalExpenses"></SfNumericTextBox>
                    </EditorComponent>
                    <InPlaceEditorEvents OnActionBegin="@(args => UpdateCoverageNow(GeneralLiabilityCoverage))" TValue="int?"></InPlaceEditorEvents>
                </SfInPlaceEditor>
            </span><br />

            <span class="pol-name">Personal Injury</span>
            <span class="pol-value">
                <SfInPlaceEditor @bind-Value="@GeneralLiabilityCoverage.PersonalInjury" Type="Syncfusion.Blazor.InPlaceEditor.InputType.Numeric" TValue="int?" EditableOn="EditableType.EditIconClick" ShowButtons="false" EmptyText="No Coverage">
                    <EditorComponent>
                        <SfNumericTextBox Format="c0" @bind-Value="@GeneralLiabilityCoverage.PersonalInjury"></SfNumericTextBox>
                    </EditorComponent>
                    <InPlaceEditorEvents OnActionBegin="@(args => UpdateCoverageNow(GeneralLiabilityCoverage))" TValue="int?"></InPlaceEditorEvents>
                </SfInPlaceEditor>
            </span><br />

            <span class="pol-name">General Aggregate</span>
            <span class="pol-value">
                <SfInPlaceEditor @bind-Value="@GeneralLiabilityCoverage.GeneralAggregate" Type="Syncfusion.Blazor.InPlaceEditor.InputType.Numeric" TValue="int?" EditableOn="EditableType.EditIconClick" ShowButtons="false" EmptyText="No Coverage">
                    <EditorComponent>
                        <SfNumericTextBox Format="c0" @bind-Value="@GeneralLiabilityCoverage.GeneralAggregate"></SfNumericTextBox>
                    </EditorComponent>
                    <InPlaceEditorEvents OnActionBegin="@(args => UpdateCoverageNow(GeneralLiabilityCoverage))" TValue="int?"></InPlaceEditorEvents>
                </SfInPlaceEditor>
            </span><br />

            <span class="pol-name">Products Aggregate</span>
            <span class="pol-value">
                <SfInPlaceEditor @bind-Value="@GeneralLiabilityCoverage.ProductsAggregate" Type="Syncfusion.Blazor.InPlaceEditor.InputType.Numeric" TValue="int?" EditableOn="EditableType.EditIconClick" ShowButtons="false" EmptyText="No Coverage">
                    <EditorComponent>
                        <SfNumericTextBox Format="c0" @bind-Value="@GeneralLiabilityCoverage.ProductsAggregate"></SfNumericTextBox>
                    </EditorComponent>
                    <InPlaceEditorEvents OnActionBegin="@(args => UpdateCoverageNow(GeneralLiabilityCoverage))" TValue="int?"></InPlaceEditorEvents>
                </SfInPlaceEditor>
            </span><br />

            <span class="pol-name">Custom Name</span>
            <span class="pol-value">
                <SfInPlaceEditor @bind-Value="@GeneralLiabilityCoverage.AdditionalCoverageName" Type="Syncfusion.Blazor.InPlaceEditor.InputType.Text" TValue="string" EditableOn="EditableType.EditIconClick" ShowButtons="false" EmptyText="No Coverage">
                    <EditorComponent>
                        <SfTextBox @bind-Value="@GeneralLiabilityCoverage.AdditionalCoverageName"></SfTextBox>
                    </EditorComponent>
                    <InPlaceEditorEvents OnActionBegin="@(args => UpdateCoverageNow(GeneralLiabilityCoverage))" TValue="string"></InPlaceEditorEvents>
                </SfInPlaceEditor>
            </span><br />

            <span class="pol-name">Custom Limit</span>
            <span class="pol-value">
                <SfInPlaceEditor @bind-Value="@GeneralLiabilityCoverage.AdditionalCoverageLimit" Type="Syncfusion.Blazor.InPlaceEditor.InputType.Numeric" TValue="int?" EditableOn="EditableType.EditIconClick" ShowButtons="false" EmptyText="No Coverage">
                    <EditorComponent>
                        <SfNumericTextBox Format="c0" @bind-Value="@GeneralLiabilityCoverage.AdditionalCoverageLimit"></SfNumericTextBox>
                    </EditorComponent>
                    <InPlaceEditorEvents OnActionBegin="@(args => UpdateCoverageNow(GeneralLiabilityCoverage))" TValue="int?"></InPlaceEditorEvents>
                </SfInPlaceEditor>
            </span><br />
        </FluentGridItem>
        <FluentGridItem xs="3">
            <span class="pol-section-title">Coverage Type</span><br />
            <span class="pol-name">Claims Made</span>
            <span class="pol-value">
                <SfCheckBox @bind-Checked="@GeneralLiabilityCoverage.ClaimsMade" ValueChange="@(async (Syncfusion.Blazor.Buttons.ChangeEventArgs<bool?> args) => await UpdateCoverageBool(args))"></SfCheckBox>
            </span><br />

            <span class="pol-name">Per Occurrence</span>
            <span class="pol-value">
                <SfCheckBox @bind-Checked="@GeneralLiabilityCoverage.Occurence" ValueChange="@(async (Syncfusion.Blazor.Buttons.ChangeEventArgs<bool?> args) => await UpdateCoverageBool(args))"></SfCheckBox>
            </span><br />

            <span class="pol-name">Aggregate Per</span>
            <span class="pol-value">
                <SfInPlaceEditor @bind-Value="@GeneralLiabilityCoverage.AggregateAppliesPer" Type="Syncfusion.Blazor.InPlaceEditor.InputType.Numeric" TValue="int?" EditableOn="EditableType.EditIconClick" ShowButtons="false" EmptyText="No Coverage">
                    <EditorComponent>
                        <SfNumericTextBox Format="c0" @bind-Value="@GeneralLiabilityCoverage.AggregateAppliesPer"></SfNumericTextBox>
                    </EditorComponent>
                    <InPlaceEditorEvents OnActionBegin="@(args => UpdateCoverageNow(GeneralLiabilityCoverage))" TValue="int?"></InPlaceEditorEvents>
                </SfInPlaceEditor>
            </span>
        </FluentGridItem>
        <FluentGridItem xs="3">
            <span class="pol-section-title">Blanket Additional Insured</span><br />
            <span class="pol-name">Attachment File</span>
            <span class="pol-value">
                @if (GeneralLiabilityCoverage.AdditionalInsuredAttachment != null)
                {
                    <div class="pol-exist">
                        <table width="100%">
                            <tr>
                                <td><a href="/uploads/@GeneralLiabilityCoverage.AdditionalInsuredAttachment.FileName" target="_blank"><img src="/img/pdficon.png" class="pdf-icon"></a></td>
                                <td valign="middle">
                                    @GeneralLiabilityCoverage.AdditionalInsuredAttachment?.FileName
                                    <FluentButton Appearance="Appearance.Lightweight" OnClick="@(async () => await RemoveFile(GeneralLiabilityCoverage.GeneralLiabilityCoverageId, GeneralLiabilityCoverage.AdditionalInsuredAttachment.AttachmentId, "gl-ai"))">Remove</FluentButton>
                                </td>
                            </tr>
                        </table>
                    </div>
                }
                else
                {
                    <span class="pol-value drop-area-wrap">
                        <SfUploader AutoUpload="true" AllowedExtensions=".pdf, .txt" AllowMultiple=false>
                            <UploaderEvents ValueChange="@OnChangeAI"></UploaderEvents>
                        </SfUploader>
                    </span>
                }
            </span><div style="height:40px;"></div>

            <span class="pol-name">Form Number</span>
            <span class="pol-value">
                <SfInPlaceEditor @bind-Value="@GeneralLiabilityCoverage.AdditionalInsuredFormNumber" Type="Syncfusion.Blazor.InPlaceEditor.InputType.Numeric" TValue="string" EditableOn="EditableType.EditIconClick" ShowButtons="false" EmptyText="No Coverage">
                    <EditorComponent>
                        <SfTextBox @bind-Value="@GeneralLiabilityCoverage.AdditionalInsuredFormNumber"></SfTextBox>
                    </EditorComponent>
                    <InPlaceEditorEvents OnActionBegin="@(args => UpdateCoverageNow(GeneralLiabilityCoverage))" TValue="string"></InPlaceEditorEvents>
                </SfInPlaceEditor>
            </span><br />

            
            <div style="width:100%; height:1px; background-color:#ccc; margin-top:10px; margin-bottom:10px; clear:both;"></div>


            @* //--------------- Waiver -----------------// *@
            <span class="pol-section-title">Waiver of Subrogration</span><br />
            <span class="pol-name">Attachment File</span>
            <span class="pol-value">
            @if (GeneralLiabilityCoverage.WaiverOfSubAttachment != null)
                {
                    <div class="pol-exist">
                        <table width="100%">
                            <tr>
                                <td><a href="/uploads/@GeneralLiabilityCoverage.WaiverOfSubAttachment.FileName" target="_blank"><img src="/img/pdficon.png" class="pdf-icon"></a></td>
                                <td valign="middle">
                                    @GeneralLiabilityCoverage.WaiverOfSubAttachment?.FileName
                                    <FluentButton Appearance="Appearance.Lightweight" OnClick="@(async () => await RemoveFile(GeneralLiabilityCoverage.GeneralLiabilityCoverageId, GeneralLiabilityCoverage.WaiverOfSubAttachment.AttachmentId, "gl-wos"))">Remove</FluentButton>
                                </td>
                            </tr>
                        </table>
                    </div>
                }
                else
                {
                    <span class="pol-value drop-area-wrap">
                        <SfUploader AutoUpload="true" AllowedExtensions=".pdf, .txt" AllowMultiple=false>
                            <UploaderEvents ValueChange="@OnChangeWOS"></UploaderEvents>
                        </SfUploader>
                    </span>
                }
            </span><div style="height:40px;"></div>
        </FluentGridItem>
    </FluentGrid>
        
}
@code {
    [Parameter]
    public Policy Policy { get; set; }

    [Parameter]
    public GeneralLiabilityCoverage GeneralLiabilityCoverage { get; set; }

    public string DebugWording { get; set; } = "Load";

    string myfilename;

    private async Task UpdateCoverageNow(GeneralLiabilityCoverage glcoverage)
    {
        await PolicyService.UpdatePolicyContextModelAsync(Policy);
    }

    private async Task OnChangeAI(UploadChangeEventArgs args)
    {
        try
        {
            foreach (var file in args.Files)
            {
                var path = $"wwwroot/uploads/{file.FileInfo.Name}";
                var fileName = file.FileInfo.Name;

                using (var filestream = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
                }

                // Create and assign the attachment to AdditionalInsuredAttachment
                var attachment = await AttachmentService.AddPolicyAttachmentAsync(fileName, GeneralLiabilityCoverage.GeneralLiabilityCoverageId, "ai");

                if (attachment != null)
                {
                    GeneralLiabilityCoverage.AdditionalInsuredAttachment = attachment;
                    await PolicyService.UpdatePolicyContextModelAsync(Policy); // Save changes to the policy
                    StateHasChanged(); // Refresh the UI
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file: {ex.Message}");
        }
    }

    private async Task OnChangeWOS(UploadChangeEventArgs args)
    {
        try
        {
            foreach (var file in args.Files)
            {
                var path = $"wwwroot/uploads/{file.FileInfo.Name}";
                var fileName = file.FileInfo.Name;

                using (var filestream = new FileStream(path, FileMode.Create, FileAccess.Write))
                {
                    await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
                }

                // Create and assign the attachment to WaiverOfSubAttachment
                var attachment = await AttachmentService.AddPolicyAttachmentAsync(fileName, GeneralLiabilityCoverage.GeneralLiabilityCoverageId, "wos");

                if (attachment != null)
                {
                    GeneralLiabilityCoverage.WaiverOfSubAttachment = attachment;
                    await PolicyService.UpdatePolicyContextModelAsync(Policy); // Save changes to the policy
                    StateHasChanged(); // Refresh the UI
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file: {ex.Message}");
        }
    }

    private async Task RemoveFile(int coverageId, int attachmentId, string attachmentType)
    {
        try
        {
            switch (attachmentType.ToLower())
            {
                case "gl-ai":
                    await AttachmentService.RemovePolicyAttachmentAsync(coverageId, "gl-ai");
                    Policy.GeneralLiabilityCoverage.AdditionalInsuredAttachment = null;
                    StateHasChanged();
                    break;
                case "gl-wos":
                    await AttachmentService.RemovePolicyAttachmentAsync(coverageId, "gl-wos");
                    Policy.GeneralLiabilityCoverage.WaiverOfSubAttachment = null;
                    StateHasChanged();
                    break;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing file: {ex.Message}");
        }
    }

    private async Task UpdateCoverageBool(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool?> args)
    {
        // Optionally, you can use 'args.Value' here if needed.
        await PolicyService.UpdatePolicyContextModelAsync(Policy);
    }
    private string ExtensionAllowed { get; set; } = ".pdf, .txt, .png";
    private void AfterSelect(SelectedEventArgs args)
    {
        string[] Extension = { "pdf", "txt", "png" };
        if (Extension.ToList().IndexOf(args.FilesData[0].Type) < 0)
        {
            args.Cancel = true;
        }
    }
    private void OnFileRemove(RemovingEventArgs args)
    {
        args.PostRawFile = false;
    }
    private void OnFailureHandler(Syncfusion.Blazor.Inputs.FailureEventArgs args)
    {
        Console.WriteLine("UPLOAD FAILURE");
        DebugWording+= "UPLOAD FAILURE";
        DebugWording += "-------";
        DebugWording += args.ToString();
        Console.WriteLine(args.ToString());
    }

    private void OnActionCompleteHandler(Syncfusion.Blazor.Inputs.ActionCompleteEventArgs args)
    {
        Console.WriteLine("UPLOAD COMPLETE");
        DebugWording += "UPLOAD COMPLETE.";
        DebugWording += args.ToString();
        Console.WriteLine(args.ToString());
        Console.WriteLine(args.FileData.ToString());

        //Save file name
    }
}
