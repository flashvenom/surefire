@page "/Policies/Products"
@using Mantis.Domain.Shared
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor
@rendermode InteractiveServer

<_toolbar />

<div class="page-content">
    <SfGrid @ref="Grid" DataSource="@GridData" AllowPaging="true" AllowSorting="true" ShowColumnChooser="true"
            Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Search", "Cancel", "ColumnChooser" })" RowHeight="30">
        <GridEvents OnActionFailure="@ActionFailure" TValue="Product"></GridEvents>
        <SfDataManager Url="https://localhost:7074/api/Product"
                       InsertUrl="https://localhost:7074/api/Product/Insert"
                       UpdateUrl="https://localhost:7074/api/Product/Update"
                       RemoveUrl="https://localhost:7074/api/Product/Delete"
                       Adaptor="Adaptors.UrlAdaptor"></SfDataManager>
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
        <GridPageSettings PageSize="20"></GridPageSettings>
        <GridColumns>
            <GridColumn Field=@nameof(Product.ProductId) HeaderText="Id" ValidationRules="@(new ValidationRules{ Required= true })" IsPrimaryKey="true" IsIdentity="true"></GridColumn>
            <GridColumn Field=@nameof(Product.LineName) HeaderText="Name" Width="400"></GridColumn>
            <GridColumn Field=@nameof(Product.LineNickname) HeaderText="Nickname"></GridColumn>
            <GridColumn Field=@nameof(Product.LineCode) HeaderText="Code"></GridColumn>
            <GridColumn Field=@nameof(Product.Description) HeaderText="Description"></GridColumn>
            <GridColumn Field=@nameof(Product.ProductModel) HeaderText="Model"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>
@statusMy

@code {
    SfGrid<Product> Grid { get; set; }
    SfDataManager DataManager { get; set; }
    string statusMy = "Loading";
    public List<Product> GridData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        statusMy = "Loaded!";
        BreadcrumbService.UpdateBreadcrumb(new List<BreadcrumbItem>
        {
            new BreadcrumbItem { Text = "Home", Url = "/" },
            new BreadcrumbItem { Text = "Policies", Url = "/Policies" },
            new BreadcrumbItem { Text = "Products & Lines" }
        });
    }

    public void ActionFailure(Syncfusion.Blazor.Grids.FailureEventArgs args)
    {
        statusMy = "ERROR ON GRID!<br>";
        statusMy += args.Error.ToString();
        StateHasChanged();
    }
}
