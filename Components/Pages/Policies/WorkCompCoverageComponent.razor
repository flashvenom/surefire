@using Mantis.Domain.Policies.Models
@using Mantis.Domain.Policies.Services
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.InPlaceEditor
@inject PolicyService PolicyService
@rendermode InteractiveServer

@if (Policy is not null || WorkCompCoverage is not null)
{
<FluentGrid>
    <FluentGridItem xs="3">
        <span class="pol-section-title">policy limits</span><br />
        <span class="pol-name">Each Accident</span>
        <span class="pol-value">
                <SfInPlaceEditor @bind-Value="@WorkCompCoverage.EachAccident" Type="Syncfusion.Blazor.InPlaceEditor.InputType.Numeric" TValue="int?" EditableOn="EditableType.EditIconClick" ShowButtons="false" EmptyText="No Coverage">
                <EditorComponent>
                        <SfNumericTextBox Format="c0" @bind-Value="@WorkCompCoverage.EachAccident"></SfNumericTextBox>
                </EditorComponent>
                <InPlaceEditorEvents OnActionBegin="@(args => UpdateCoverageNow(WorkCompCoverage))" TValue="int?"></InPlaceEditorEvents>
            </SfInPlaceEditor>
        </span><br />


        <span class="pol-name">Disease (Policy)</span>
        <span class="pol-value">
            <SfInPlaceEditor @bind-Value="@WorkCompCoverage.DiseasePolicyLimit" Type="Syncfusion.Blazor.InPlaceEditor.InputType.Numeric" TValue="int?" EditableOn="EditableType.EditIconClick" ShowButtons="false" EmptyText="No Coverage">
                <EditorComponent>
                        <SfNumericTextBox Format="c0" @bind-Value="@WorkCompCoverage.DiseasePolicyLimit"></SfNumericTextBox>
                </EditorComponent>
                <InPlaceEditorEvents OnActionBegin="@(args => UpdateCoverageNow(WorkCompCoverage))" TValue="int?"></InPlaceEditorEvents>
            </SfInPlaceEditor>
        </span><br />


            <span class="pol-name">Disease (Employee)</span>
        <span class="pol-value">
            <SfInPlaceEditor @bind-Value="@WorkCompCoverage.DiseaseEachEmployee" Type="Syncfusion.Blazor.InPlaceEditor.InputType.Numeric" TValue="int?" EditableOn="EditableType.EditIconClick" ShowButtons="false" EmptyText="No Coverage">
                <EditorComponent>
                        <SfNumericTextBox Format="c0" @bind-Value="@WorkCompCoverage.DiseaseEachEmployee"></SfNumericTextBox>
                </EditorComponent>
                    <InPlaceEditorEvents OnActionBegin="@(args => UpdateCoverageNow(WorkCompCoverage))" TValue="int?"></InPlaceEditorEvents>
            </SfInPlaceEditor>
        </span><br />

    </FluentGridItem>
    <FluentGridItem xs="3">
        <span class="pol-section-title">Coverage Details</span><br />
        <span class="pol-name">Owners Excluded</span>
        <span class="pol-value">
                <SfCheckBox @bind-Checked="@WorkCompCoverage.OwnersOfficersExcluded" ValueChange="@(async (Syncfusion.Blazor.Buttons.ChangeEventArgs<bool?> args) => await UpdateCoverageBool(args))"></SfCheckBox>
        </span><br />
    </FluentGridItem>
    <FluentGridItem xs="3">

            <span class="pol-section-title">Waiver of Subrogration</span><br />

        <span class="pol-name">Included</span>
        <span class="pol-value">
                <SfCheckBox @bind-Checked="@WorkCompCoverage.WaiverOfSub" ValueChange="@(async (Syncfusion.Blazor.Buttons.ChangeEventArgs<bool?> args) => await UpdateCoverageBool(args))"></SfCheckBox>
        </span><br />

        <span class="pol-name">Attachment File</span>
        <span class="pol-value drop-area-wrap">
            <SfUploader DropArea=".drop-area-wrap" AllowedExtensions="@ExtensionAllowed">
                <UploaderAsyncSettings SaveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Save" RemoveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Remove"></UploaderAsyncSettings>
                <UploaderEvents OnRemove="@OnFileRemove" FileSelected="@AfterSelect"></UploaderEvents>
            </SfUploader>
        </span><br />



    </FluentGridItem>
</FluentGrid>

}
@code {
    [Parameter]
    public Policy Policy { get; set; }

    [Parameter]
    public WorkCompCoverage WorkCompCoverage { get; set; }

    private async Task UpdateCoverageNow(WorkCompCoverage wxcoverage)
    {
        await PolicyService.UpdatePolicyContextModelAsync(Policy);
    }

    private async Task UpdateCoverageBool(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool?> args)
    {
        // Optionally, you can use 'args.Value' here if needed.
        await PolicyService.UpdatePolicyContextModelAsync(Policy);
    }
    private string ExtensionAllowed { get; set; } = ".pdf, .txt, .png";
    private void AfterSelect(SelectedEventArgs args)
    {
        string[] Extension = { "pdf", "txt", "png" };
        if (Extension.ToList().IndexOf(args.FilesData[0].Type) < 0)
        {
            args.Cancel = true;
        }
    }
    private void OnFileRemove(RemovingEventArgs args)
    {
        args.PostRawFile = false;
    }
}
