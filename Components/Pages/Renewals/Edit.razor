@page "/Renewals/Edit/{RenewalId:int}"
@using Microsoft.EntityFrameworkCore
@using Mantis.Domain.Renewals.Models
@using Mantis.Domain.Shared
@using Mantis.Domain.Shared.Services
@using Mantis.Domain.Carriers.Services
@using Mantis.Domain.Carriers.Models
@using Mantis.Domain.Users.Services
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject SharedService SharedService
@inject CarrierService CarrierService
@inject UserService UserService
@rendermode InteractiveServer

<PageTitle>Edit Renewal</PageTitle>
<SfBreadcrumb>
    <BreadcrumbItems>
        <BreadcrumbItem Text="Renewals" Url="/Renewals" />
        <BreadcrumbItem Text="Edit" />
    </BreadcrumbItems>
</SfBreadcrumb>

<_toolbar />

<div class="page-content">
    <div class="mh1">Edit Renewal</div>
    @if (Renewal is null || Products is null || Carriers is null || Wholesalers is null || Users is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm Model="Renewal" OnValidSubmit="UpdateRenewal">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mf-flex mf-flex-row mf-row-container">
                <div class="mf-item-lg">
                    <div class="mb-3">
                        <SfDatePicker TValue="DateTime" @bind-Value="Renewal.RenewalDate" Placeholder="Renewal Date" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => Renewal.RenewalDate" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox @bind-Value="Renewal.ExpiringPolicyNumber" Placeholder="Expiring Policy Number" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => Renewal.ExpiringPolicyNumber" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <SfNumericTextBox TValue="decimal?" @bind-Value="Renewal.ExpiringPremium" Placeholder="Expiring Premium" FloatLabelType="FloatLabelType.Always" Format="C2" />
                        <ValidationMessage For="() => Renewal.ExpiringPremium" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox @bind-Value="Renewal.Notes" Placeholder="Notes" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => Renewal.Notes" class="text-danger" />
                    </div>
                </div>
                <div class="mf-item-lg mf-pad-left">
                    <div class="mb-3">
                        <SfDropDownList TValue="int" TItem="Product" DataSource="@Products" Placeholder="Product" @bind-Value="Renewal.ProductId" AllowFiltering="true" PopupHeight="230px" ShowClearButton="true" FloatLabelType="FloatLabelType.Always">
                            <DropDownListFieldSettings Text="LineName" Value="ProductId" />
                        </SfDropDownList>
                        <ValidationMessage For="() => Renewal.ProductId" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <SfDropDownList TValue="int?" TItem="Carrier" DataSource="@Carriers" Placeholder="Carrier" @bind-Value="Renewal.CarrierId" AllowFiltering="true" PopupHeight="230px" ShowClearButton="true" FloatLabelType="FloatLabelType.Always">
                            <DropDownListFieldSettings Text="CarrierName" Value="CarrierId" />
                        </SfDropDownList>
                        <ValidationMessage For="() => Renewal.CarrierId" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <SfDropDownList TValue="int?" TItem="Carrier" DataSource="@Wholesalers" Placeholder="Wholesaler" @bind-Value="Renewal.WholesalerId" AllowFiltering="true" PopupHeight="230px" ShowClearButton="true" FloatLabelType="FloatLabelType.Always">
                            <DropDownListFieldSettings Text="CarrierName" Value="CarrierId" />
                        </SfDropDownList>
                        <ValidationMessage For="() => Renewal.WholesalerId" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <SfDropDownList TValue="string" TItem="ApplicationUser" DataSource="@Users" Placeholder="Assigned To" @bind-Value="Renewal.AssignedToId" AllowFiltering="true" PopupHeight="230px" ShowClearButton="true" FloatLabelType="FloatLabelType.Always">
                            <DropDownListFieldSettings Text="FirstName" Value="Id" />
                        </SfDropDownList>
                        <ValidationMessage For="() => Renewal.AssignedToId" class="text-danger" />
                    </div>
                </div>
            </div>
            <br />
            <FluentButton Type="ButtonType.Button" Appearance="Appearance.Outline" OnClick="GoBack">Cancel</FluentButton>
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Save Renewal</FluentButton>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public int RenewalId { get; set; }

    private Renewal? Renewal { get; set; }
    private List<Product> Products { get; set; }
    private List<Carrier> Carriers { get; set; }
    private List<Carrier> Wholesalers { get; set; }
    private List<ApplicationUser> Users { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Renewal = await DbContext.Renewals
            .Include(r => r.Product)
            .Include(r => r.Carrier)
            .Include(r => r.Wholesaler)
            .Include(r => r.AssignedTo)
            .FirstOrDefaultAsync(m => m.RenewalId == RenewalId);

        if (Renewal is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        Products = await SharedService.GetAllProductsAsync();
        Carriers = await CarrierService.GetAllCarriersAsync();
        Wholesalers = await CarrierService.GetAllWholesalersAsync();
        Users = await UserService.GetAllUsersAsync();

        if (Renewal.Product != null)
        {
            Renewal.ProductId = Renewal.Product.ProductId;
        }
        if (Renewal.Carrier != null)
        {
            Renewal.CarrierId = Renewal.Carrier.CarrierId;
        }
        if (Renewal.Wholesaler != null)
        {
            Renewal.WholesalerId = Renewal.Wholesaler.CarrierId;
        }
        if (Renewal.AssignedTo != null)
        {
            Renewal.AssignedToId = Renewal.AssignedTo.Id;
        }

    }

    private async Task UpdateRenewal()
    {
        Renewal.Product = Products.FirstOrDefault(p => p.ProductId == Renewal.ProductId);
        Renewal.Carrier = Carriers.FirstOrDefault(c => c.CarrierId == Renewal.CarrierId);
        Renewal.Wholesaler = Wholesalers.FirstOrDefault(w => w.CarrierId == Renewal.WholesalerId);
        Renewal.AssignedTo = Users.FirstOrDefault(u => u.Id == Renewal.AssignedToId);

        DbContext.Attach(Renewal!).State = EntityState.Modified;

        try
        {
            await DbContext.SaveChangesAsync();
            NavigationManager.NavigateTo("/renewals");
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RenewalExists(Renewal!.RenewalId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
    }

    private bool RenewalExists(int renewalId)
    {
        return DbContext.Renewals.Any(e => e.RenewalId == renewalId);
    }

    public void GoBack()
    {
        NavigationManager.NavigateTo("/renewals");
    }
}
