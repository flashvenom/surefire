@page "/Ren"
@using Mantis.Domain.Policies.Models
@using Mantis.Domain.Policies.Services
@using Mantis.Domain.Renewals.Models
@using Mantis.Domain.Renewals.Services
@using Mantis.Domain.Carriers.Models
@using Mantis.Domain.Carriers.Services
@using Mantis.Domain.Users.Services
@using Mantis.Domain.Shared.Helpers
@using Mantis.Components.Pages.Renewals
@using Mantis.Components.Shared
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.FluentUI.AspNetCore.Components
@inject RenewalService RenewalService
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject CarrierService CarrierService
@inject ProtectedSessionStorage sessionStorage
@rendermode InteractiveServer

<SfBreadcrumb>
    <BreadcrumbItems>
        <BreadcrumbItem Text="Renewals" Url="/Renewals" />
        <BreadcrumbItem Text="List" />
    </BreadcrumbItems>
</SfBreadcrumb>

<div class="page-toolbar">
    <SfButton @onclick="@((args) => NavigateToRenewalCreate())" CssClass="e-primary" IconCss="e-icons e-plus-icon">New Renewal</SfButton>

    <span class="sf-verthr"></span>

    <span class="toolbar-calendar-@(currentView)">
        <NavLink class="toolbar-link" @onclick="ShowSelected" Match="NavLinkMatch.Prefix">
            <FluentIcon Value="@(new Icons.Regular.Size24.BookStar())" />
            <span class="toolbar-text">Renewal</span>
        </NavLink>
    </span>

    <span class="toolbar-selected-@(currentView)">
        <NavLink class="toolbar-link" @onclick="ShowCalendar" Match="NavLinkMatch.Prefix">
            <FluentIcon Value="@(new Icons.Regular.Size24.Calendar())" />
            <span class="toolbar-text">Calendar</span>
        </NavLink>
    </span>
    
    

    <span class="sf-verthr2"></span>

    <span class="toolbar-calendar-@(currentView)">
        <a class="sf-chevron" @onclick="PrevMonth"><FluentIcon Value="@(new Icons.Filled.Size24.CaretLeft())" Color="Color.FillInverse" Slot="start" /></a>
        <span class="monthholder">
            <select @onchange="OnMonthChanged" value="@htmlMonth" class="e-input e-dropdownlist sf-eformbld">
                @for (var i = 1; i <= 12; i++)
                {
                    <option value="@i">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i)</option>
                }
            </select>
        </span>
        <a class="sf-chevron" @onclick="NextMonth"><FluentIcon Value="@(new Icons.Filled.Size24.CaretRight())" Color="Color.FillInverse" Slot="start" /></a>
        <span class="spcr"></span>

        <span class="sf-verthr2"></span>

        <span class="monthholder">
            <select @onchange="OnYearChanged" value="@htmlYear" class="e-input e-dropdownlist">
                @for (var i = 2020; i <= DateTime.Now.Year + 5; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </span>
        <span class="spcr"></span>

        <span class="sf-verthr2"></span>

        <select @onchange="OnUserChanged" value="@htmlUser" class="e-input e-dropdownlist">
            <option value="Everyone">Everyone</option>
            @if (allUsers != null)
            {
                @foreach (var item in allUsers)
                {
                    <option value="@item.Id">@item.FirstName @item.LastName</option>
                }
            }
        </select>
    </span>
    <span class="spcr"></span>

    <span class="sf-verthr2"></span>

    <NavLink class="toolbar-link" href="Renewals/MasterTasks" Match="NavLinkMatch.Prefix">
        <FluentIcon Value="@(new Icons.Regular.Size24.ShieldTask())" />
        <span class="toolbar-text">Master Tasks</span>
    </NavLink>

    <NavLink class="toolbar-link" href="Renewals/List" Match="NavLinkMatch.Prefix">
        <FluentIcon Value="@(new Icons.Regular.Size24.Database())" />
        <span class="toolbar-text">Data</span>
    </NavLink>

    @if (selectedRenewalId != 0 && selectedClass != "selected-off")
    {
        <span class="sf-verthr2"></span>

        <NavLink class="toolbar-link" href="@("Renewals/Edit/" + selectedRenewalId)" Match="NavLinkMatch.Prefix">
            <FluentIcon Value="@(new Icons.Regular.Size24.PenSparkle())" />
            <span class="toolbar-text">Edit Renewal</span>
        </NavLink>
    }
</div>


<div class="page-content">
    <div id="filter-results" class="@resultsClass">
        
            <div class="homelist">
                <table class="sf-table">
                    <thead class="sf-thead">
                        <tr class="sf-rentable">
                            <th>Date</th>
                            <th>Line</th>
                            <th><strong>Insured</strong></th>
                            <th>%</th>
                            <th>Carrier</th>
                            <th>MGA</th>
                            <th>Policy</th>
                            <th>Id</th>
                            <th>Assigned To</th>
                        </tr>
                    </thead>
                    <tbody>
                    @if (RenewalList != null)
                    {
                        @foreach (var item in RenewalList)
                        {
                            <tr>
                                <td style="text-align:center;">@item.RenewalDate.ToString("M/d")</td>
                                <td class="sf-td-mono">@item.Product?.LineCode</td>
                                <td class="sf-td-bold"><a class="renewalitemlink" @onclick="() => LoadSelectedRenewal(item.RenewalId)">@item.Client?.Name</a></td>
                                <td><Battery PerComplete=@StringHelper.RenewalProgressPercent(item.TrackTasks) /></td>
                                <td class="sf-td-sm">@item.Carrier?.CarrierName</td>
                                <td class="sf-td-sm2">@item.Wholesaler?.CarrierNickname</td>
                                <td class="sf-td-sm"><a href="/Clients/List/@item.ClientId">@item.Policy?.PolicyNumber</a></td>
                                <td class="sf-td-mono">@(item.RenewalId + "-" + item.Policy?.PolicyId)</td>
                                <td>
                                    <img src="img/staff/@item.AssignedTo.PictureUrl" alt="User Image" class="renewal-assignedto" />
                                    <span class="txt-name">@item.AssignedTo?.FirstName @item.AssignedTo?.LastName</span>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                    <tr>
                        <td colspan="8" class="sf-td-mono">
                            <FluentSkeleton Width="100%" Height="500px" Shimmer="true"></FluentSkeleton> 
                        </td>
                    </tr>
                    }
                </tbody>
                </table>
            </div>
        
        @if (PolicyOrphanList != null && htmlUser == "Everyone")
        {
            <div class="txt-section">Policies without Renewals</div>
            <table>
                <thead class="txt-small">
                    <tr>
                        <th>PolicyId</th>
                        <th>Expire</th>
                        <th>Line</th>
                        <th>Client</th>
                        <th>Carrier</th>
                        <th>Wholesaler</th>
                        <th>Policy #</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody class="txt-p">
                    @foreach (var item in PolicyOrphanList)
                    {
                        <tr>
                            <td>@item.PolicyId</td>
                            <td>@item.ExpirationDate.ToString("M/d/yy")</td>
                            <td>@item.Product?.LineCode</td>
                            <td><a href="/Clients/List/@item.ClientId" target="_blank">@item.Client?.Name</a></td>
                            <td>@item.Carrier?.CarrierName</td>
                            <td>@item.Wholesaler?.CarrierNickname</td>
                            <td>@item.PolicyNumber</td>
                            <td><a @onclick="() => CreateRenewal(item.PolicyId)">Renew</a></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>

    <div id="renewal-view" class="@selectedClass">
        <RenewalDetails @ref="renewalDetailsComponent" AllCarriers="@AllCarriers" AllWholesalers="@AllWholesalers" AllUsers="@AllUsers" />
    </div>
</div>


@code {
    private int htmlMonth;
    private int htmlYear;
    private string currentView = "calendar";
    private string htmlUser = "Everyone";
    private List<ApplicationUser> allUsers = new List<ApplicationUser>();
    private List<Renewal> RenewalList = new List<Renewal>();
    private bool isLoading = true;
    public List<Carrier> AllCarriers;
    public List<Carrier> AllWholesalers;
    public List<ApplicationUser> AllUsers;

    List<Policy> PolicyOrphanList { get; set; } = new List<Policy>();
    private RenewalDetails renewalDetailsComponent;



    public int selectedRenewalId { get; set; } = 0; 
    public int alreadyJumped = 0; //?
    private int? lastJumpMonth; //?
    private int? lastJumpYear; //?
    public int openid; //?
    private bool isInitialized = false; //?



    string resultsClass;
    string selectedClass;

    protected override async Task OnInitializedAsync()
    {
        allUsers = await UserService.GetAllUsers();
        AllCarriers = await CarrierService.GetAllCarriersAsync();
        AllWholesalers = await CarrierService.GetAllWholesalersAsync();
        ParseUrlParameters();
        ShowCalendar();

        // If no URL params, use default values and load data
        if (htmlMonth == 0 || htmlYear == 0)
        {
            htmlMonth = DateTime.Now.Month;
            htmlYear = DateTime.Now.Year;
            htmlUser = UserService.GetLoggedInUserId();
            UpdateUrlWithState();
        }

        // Load the renewal list based on the current filters
        await LazyLoadRenewalList();
    }
    private async Task LazyLoadRenewalList()
    {
        Console.WriteLine($"--------------------------------------------LAZY LOAD rid:{selectedRenewalId} isInitialized: {isInitialized} htmlMonth: {htmlMonth} ");
        // Show a loading skeleton (FluentSkeleton) until the data is loaded.
        isLoading = true;
        //RenewalList = null;
        //StateHasChanged();

        try
        {
            RenewalList = await RenewalService.GetFilteredRenewalListAsync(htmlMonth, htmlYear, htmlUser);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading renewal list: " + ex.Message);
            // Handle errors here (optional)
        }
        finally
        {
            isLoading = false;

        }
        StateHasChanged(); // Ensure UI updates once the list is loaded.
    }
    private void ParseUrlParameters()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        // Parse month from the query params
        if (queryParams.TryGetValue("month", out var monthValue))
        {
            htmlMonth = int.Parse(monthValue);
        }
        else
        {
            htmlMonth = DateTime.Now.Month; // default
        }

        // Parse year from the query params
        if (queryParams.TryGetValue("year", out var yearValue))
        {
            htmlYear = int.Parse(yearValue);
        }
        else
        {
            htmlYear = DateTime.Now.Year; // default
        }

        // Parse user from the query params
        if (queryParams.TryGetValue("user", out var userValue))
        {
            htmlUser = userValue;
        }
        else
        {
            htmlUser = "Everyone"; // default
        }
    }
    private async void OnMonthChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        htmlMonth = int.Parse(e.Value.ToString());
        UpdateUrlWithState();
        await LazyLoadRenewalList();
    }

    private async void OnYearChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        htmlYear = int.Parse(e.Value.ToString());
        UpdateUrlWithState();
        await LazyLoadRenewalList();
    }

    private async void OnUserChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        htmlUser = e.Value.ToString();
        UpdateUrlWithState();
        await LazyLoadRenewalList();
    }

    private void UpdateUrlWithState()
    {
        var uri = NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object>()
        {
            { "month", htmlMonth },
            { "year", htmlYear },
            { "user", htmlUser }
        });

        NavigationManager.NavigateTo(uri, forceLoad: false); // Change URL without reloading the page
    }

    private async Task LoadSelectedRenewal(int renewalId)
    {
        ShowSelected();
        Console.WriteLine("-----LoadSelected");
        try
        {
            Console.WriteLine("-----LoadSelected2");
            if (renewalDetailsComponent != null)
            {
                Console.WriteLine("-----LoadSelected3");
                await renewalDetailsComponent.LoadRenewal(renewalId); // Call the method via the component reference
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading selected renewal {renewalId}: " + ex.Message);
        }
    }




    private void NavigateToRenewalCreate()
    {
        NavigationManager.NavigateTo("/Renewals/Create");
    }
    

    private async Task NextMonth()
    {
        // If the current month is December, increment the year and set the month to January
        if (htmlMonth < 12)
        {
            htmlMonth++;
        }
        else
        {
            htmlMonth = 1;
            htmlYear++;
        }

        // Update the URL with the new state and reload the renewal list
        UpdateUrlWithState();
        await LazyLoadRenewalList();
    }

    private async Task PrevMonth()
    {
        // If the current month is January, decrement the year and set the month to December
        if (htmlMonth > 1)
        {
            htmlMonth--;
        }
        else
        {
            htmlMonth = 12;
            htmlYear--;
        }

        // Update the URL with the new state and reload the renewal list
        UpdateUrlWithState();
        await LazyLoadRenewalList();
    }


    private void ShowCalendar()
    {
        currentView = "calendar";
        resultsClass = "results-on";
        selectedClass = "results-off";
    }
    private void ShowSelected()
    {
        currentView = "selected";
        resultsClass = "results-off";
        selectedClass = "results-on";
    }

    private async Task CreateRenewal(int policyid)
    {
        var renewal = await RenewalService.CreateRenewalFromPolicyAsync(policyid);

        if (renewal == null || renewal.RenewalId == 0)
        {
            throw new Exception("Failed to create renewal.");
        }

        int renewalid = renewal.RenewalId;

        Navigation.NavigateTo($"/Renewals/{renewalid}");

    }
}