@page "/Renewals/MasterTasks"
@using Mantis.Domain.Renewals.Models
@using Mantis.Domain.Renewals.Services
@using Mantis.Domain.Shared.Helpers
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject DataHelper DataHelper
@inject RenewalService RenewalService
@rendermode InteractiveServer

<SfBreadcrumb>
    <BreadcrumbItems>
        <BreadcrumbItem Text="Tasks" Url="/Tasks" />
        <BreadcrumbItem Text="Browse" />
    </BreadcrumbItems>
</SfBreadcrumb>

<_toolbar />

<div class="page-content-datagrid">
    <div class="fluent-data-grid">
        <FluentDataGrid Items="@FilteredTasks" ResizableColumns="true" Pagination="@pagination" ShowHover="true"
                        OnRowDoubleClick="@((FluentDataGridRow<TaskMaster> row) => HandleRowDoubleClick(row))"
                        OnRowClick="@((FluentDataGridRow<TaskMaster> row) => HandleRowClick(row))">
            <PropertyColumn Property="@(p => p.Id)" Title="Id" Width="60px" Sortable="true" />
            <PropertyColumn Property="@(p => p.TaskName)" Title="Task Name" Sortable="true" />
            <PropertyColumn Property="@(p => p.Description)" Title="Description" Sortable="true" />
            <PropertyColumn Property="@(p => p.DaysBeforeExpiration)" Title="Days Before Expiration" Sortable="true" />
            <PropertyColumn Property="@(p => p.ParentTaskId)" Title="Parent Task Id" Sortable="true" />
            <PropertyColumn Property="@(p => p.ForType)" Title="For Type" Sortable="true" />
            <PropertyColumn Property="@(p => p.Important)" Title="Important" Sortable="true" />
            <PropertyColumn Property="@(p => p.OrderNumber)" Title="Order Number" Sortable="true" />
        </FluentDataGrid>
        <div class="fluent-data-grid__bottombar">
            <div class="fluent-data-grid__pagination">
                <FluentPaginator State="@pagination" />
            </div>

            <div class="fluent-data-grid__search">
                <FluentSearch Placeholder="Search..." @bind-Value="SearchTerm" @oninput="HandleSearchInput" />
            </div>
        </div>
    </div>
</div>

@code {
    public IQueryable<TaskMaster> TaskData { get; set; }
    public IQueryable<TaskMaster> FilteredTasks { get; set; }
    public int TaskId { get; set; }
    public string SelectedTaskName { get; set; } = "";
    public string SearchTerm { get; set; } = string.Empty;
    PaginationState pagination = new PaginationState { ItemsPerPage = 18 };
    private System.Timers.Timer debounceTimer;
    bool SelectFromEntireRow = true;


    protected override async Task OnInitializedAsync()
    {
        TaskData = RenewalService.GetAllTaskMasters();
        FilteredTasks = TaskData;
        debounceTimer = new System.Timers.Timer(300); // Debounce for 300ms
        debounceTimer.AutoReset = false; // Prevent multiple triggers
        debounceTimer.Elapsed += async (sender, e) =>
        {
            await InvokeAsync(ApplySearchFilter); // Apply the search filter after the debounce period
        };
    }

    private void HandleSearchInput(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (e.Value is string searchTerm)
        {
            SearchTerm = searchTerm;
            debounceTimer.Stop();
            debounceTimer.Start(); // Start the debounce timer
        }
    }


    private void ApplySearchFilter()
    {
        FilteredTasks = string.IsNullOrWhiteSpace(SearchTerm)
        ? TaskData
        : TaskData.Where(t =>
              EF.Functions.Like(t.TaskName.ToLower(), $"%{SearchTerm.ToLower()}%")
           || EF.Functions.Like(t.Description.ToLower(), $"%{SearchTerm.ToLower()}%")
           || EF.Functions.Like(t.ForType.ToLower(), $"%{SearchTerm.ToLower()}%"));

        InvokeAsync(StateHasChanged); // Trigger UI refresh after filtering
    }

    private void HandleRowDoubleClick(FluentDataGridRow<TaskMaster> row)
    {
        if (row != null && row.Item != null)
        {
            var selectedTask = row.Item;
            TaskId = selectedTask.Id;
            NavigationManager.NavigateTo($"/Tasks/Details/{TaskId}");
        }
    }

    private void HandleRowClick(FluentDataGridRow<TaskMaster> row)
    {
        if (row != null && row.Item != null)
        {
            var selectedTask = row.Item;
            row.Class = "selected-row";
            SelectedTaskName = selectedTask.TaskName + ": ";
            TaskId = selectedTask.Id;
            StateHasChanged();
        }
    }
}
