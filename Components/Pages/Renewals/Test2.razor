@page "/Renewals/Test2"
@using Mantis.Domain.Policies.Models
@using Mantis.Domain.Policies.Services
@using Mantis.Domain.Renewals.Models
@using Mantis.Domain.Renewals.Services
@using Mantis.Domain.Users.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject PolicyService PolicyService
@inject RenewalService RenewalService
@inject UserService UserService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer

<_toolbar />

<div class="page-content">
    <h1 class="renewalheader">Renewal Manager</h1>

    <div class="filter-section">
        @* <div>
        <FluentSelect TOption="ApplicationUser" Label="Assigned To" @bind-Value="SelectedAssignedUserId">
        <FluentOption Value="null">Everyone</FluentOption>
        @foreach (var user in AssignedUsers)
        {
        <FluentOption Value="@user.Id">@user.UserName</FluentOption>
        }
        </FluentSelect>
        </div> *@
        <div class="month-selector">
            <button @onclick="PrevMonth">&lt;</button>
            <FluentSelect Items=@MonthOptions
                          TOption="Option<int>"
                          OptionText="@(i => i.Text)"
                          OptionValue="@(i => i.Value.ToString())"
                          OptionDisabled="@(i => i.Disabled)"
                          @bind-SelectedOption="@selectedIntOption"
                          @bind-Value="@intValue"
                          @onchange="@RunFilter" />

            <select @onchange="@FormChange">
                <option value="1">January</option>
                <option value="2">February</option>
                <option value="3">March</option>
                <option value="4">April</option>
                <option value="5">May</option>
                <option value="6">June</option>
                <option value="7">July</option>
                <option value="8">August</option>
                <option value="9">September</option>
                <option value="10">October</option>
                <option value="11">November</option>
                <option value="12">December</option>
            </select>


            <button @onclick="NextMonth">&gt;</button><br />


        </div>
        @* <div class="year-selector">
        <button @onclick="PrevYear">&lt;</button>
        <FluentSelect TOption="int" Label="Year" @bind-Value="SelectedYear2">
        @foreach (var year in YearOptions)
        {
        <FluentOption Value="@year.ToString()">@year</FluentOption>
        }
        </FluentSelect>
        <button @onclick="NextYear">&gt;</button>
        </div> *@
        <button @onclick="ApplyFilters">Apply Filters</button>
    </div>
    <table border="3">
        <tr>
            <td>selectedIntOption @selectedIntOption</td>
            <td>intValue @intValue</td>
            <td>newInt @newInt</td>
            <td>sm @UnboundSelected </td>
        </tr>

    </table>
    <div class="homelist">
        <table class="table" style="font-size:1.25em;">
            <thead>
                <tr>
                    <th>Renewal</th>
                    <th><strong>Insured Name</strong></th>
                    <th>Policy Type</th>
                    <th>Carrier</th>
                    <th>MGA</th>
                    <th>ExpiringPolicyNumber</th>
                    <th>PolicyId</th>
                    <th>CSR</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Renewals)
                {
                    <tr>
                        <td>@item.RenewalDate.ToShortDateString()</td>
                        <td><a href="/Renewals/@item.RenewalId">@item.Client?.Name</a></td>
                        <td>@item.Product?.LineNickname</td>
                        <td>@item.Carrier?.CarrierName</td>
                        <td>@item.Wholesaler?.CarrierName</td>
                        <td>@item.Policy?.PolicyNumber</td>
                        <td>@item.Policy?.PolicyId</td>
                        <td>@item.AssignedTo?.FirstName</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<br />

<br />
@foreach (var item in Renewals)
{
    @item.RenewalDate.Month
}
@code {
    string? stringValue;
    string? intValue;
    int selectedMonthInt = DateTime.Now.Month;
    Option<int>? selectedIntOption;
    int newInt { get; set; }
    int UnboundSelected { get; set; }

    private string SelectedAssignedUserId { get; set; }
    private ApplicationUser SelectedApplicationUser { get; set; }
    private int SelectedMonth { get; set; } = DateTime.Now.Month;
    private int SelectedYear { get; set; } = DateTime.Now.Year;
    private List<Renewal> Renewals { get; set; } = new List<Renewal>();
    private List<ApplicationUser> AllUsers { get; set; } = new List<ApplicationUser>();

    private List<Option<int>> MonthOptions { get; } = new List<Option<int>>
    {
        new Option<int> { Value = 1, Text = "January" },
        new Option<int> { Value = 2, Text = "February" },
        new Option<int> { Value = 3, Text = "March" },
        new Option<int> { Value = 4, Text = "April" },
        new Option<int> { Value = 5, Text = "May" },
        new Option<int> { Value = 6, Text = "June" },
        new Option<int> { Value = 7, Text = "July" },
        new Option<int> { Value = 8, Text = "August" },
        new Option<int> { Value = 9, Text = "September" },
        new Option<int> { Value = 10, Text = "October" },
        new Option<int> { Value = 11, Text = "November" },
        new Option<int> { Value = 12, Text = "December" }
    };

    private List<int> YearOptions { get; } = new List<int> { 2023, 2024, 2025, 2026 };

    protected override async Task OnInitializedAsync()
    {
        // //Set Month
        // if (Convert.ToInt32(intValue) > 1)
        // {
        //     selectedMonthInt = Convert.ToInt32(intValue);
        // }

        // Default to currently signed-in user
        AllUsers = await UserService.GetAllUsers();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUser = AllUsers.FirstOrDefault(u => u.UserName == user.Identity.Name);
        SelectedAssignedUserId = currentUser?.Id;

        Renewals = await RenewalService.GetAllRenewalsAsync();

        BreadcrumbService.UpdateBreadcrumb(new List<BreadcrumbItem>
        {
            new BreadcrumbItem { Text = "Home", Url = "/" },
            new BreadcrumbItem { Text = "Renewals" }
        });
        InvokeAsync(StateHasChanged);
    }
    private void RunFilter()
    {
        newInt = selectedIntOption.Value;
        //Renewals = await RenewalService.GetFilteredRenewalList(Convert.ToInt32(intValue), 2024, null);
        StateHasChanged();
    }

    private void FormChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        //UnboundSelected = args.Value.ToString();
        Renewals = RenewalService.GetFilteredRenewalList(UnboundSelected, 2024, null);
        StateHasChanged();
    }

    private void ApplyFilters()
    {
        StateHasChanged(); // Refresh the UI with the filtered renewals
    }

    private void PrevMonth()
    {
        if (SelectedMonth > 1)
        {
            SelectedMonth--;
        }
        else
        {
            SelectedMonth = 12;
            PrevYear();
        }
    }

    private void NextMonth()
    {
        if (SelectedMonth < 12)
        {
            SelectedMonth++;
        }
        else
        {
            SelectedMonth = 1;
            NextYear();
        }
    }

    private void PrevYear()
    {
        SelectedYear--;
    }

    private void NextYear()
    {
        SelectedYear++;
    }
}

<style>
    h1 {
        margin-top: 0px !important;
        padding-top: 0px !important;
    }

    .filter-section {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    .month-selector, .year-selector {
        display: flex;
        align-items: center;
        gap: 5px;
    }

        .month-selector button, .year-selector button {
            background-color: transparent;
            border: none;
            cursor: pointer;
            font-size: 1.5em;
        }
</style>
