@page "/Renewals/Table/{RenewalId:int}"
@using Mantis.Domain.Renewals.Models
@using Mantis.Domain.Renewals.ViewModels
@using Mantis.Domain.Renewals.Services
@using Microsoft.AspNetCore.Components
@using Syncfusion.Blazor
@using Syncfusion.Blazor.SplitButtons
@using Microsoft.FluentUI.AspNetCore.Components;
@using Mantis.Domain.Shared.Helpers;
@inject IDialogService DialogService
@inject RenewalService RenewalService

@rendermode InteractiveServer

<_toolbar />

<div class="page-content">
    @if (renewal != null)
    {
        <h1>@renewal.Client.Name - @renewal.RenewalId</h1>
        <FluentButton OnClick="@OpenDialogAsync" Appearance="Appearance.Accent">
            Open Dialog
        </FluentButton>
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th style="width:280px">Task</th>
                    <th>Status</th>
                    <th>Sub</th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in Tasks)
                {
                    <tr class="@GetRowClass(task)">
                        <td>
                            <a id="myId-@(task.TaskItemId)" class="sf-threedot"><FluentIcon Value="@(new Icons.Regular.Size24.MoreVertical())" Color="Color.Accent" /></a>
                            <FluentMenu Anchor="@("myId-" + task.TaskItemId)" Trigger="MouseButton.Left" Anchored="true" VerticalInset="true">
                                <FluentMenuItem OnClick="@((e) => HighlightRow(task.TaskItemId))">
                                    <span slot="start"><FluentIcon Value="@(new Icons.Regular.Size24.Lightbulb())" Color="Color.FillInverse" Slot="start" /></span>
                                    Highlight
                                </FluentMenuItem>

                            </FluentMenu>
                            <input type="checkbox" class="sf-completedcheckbox" checked="@task.IsCompleted" @onchange="@(args => OnCompletedChanged(task.TaskItemId, ((Microsoft.AspNetCore.Components.ChangeEventArgs)args).Value))" />
                        </td>
                        <td style="padding:0px 5px;">@task.TaskItemName</td>
                        <td class="ds">@((MarkupString)DateHelper.FormatRenewalStatus(task.TaskGoalDate, task.IsCompleted, task.TaskCompletedDate))</td>
                        <td>@(task.AssignedSubUser?.Email ?? "")</td>
                        <td>
                            <input type="text" value="@task.Notes" class="form-control" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <h1>Loading renewal...</h1>
    }
</div>

<style>
    .highlighted-row td:nth-child(2) {
        background-color: #ffe762ff !important;
        color: #000000be !important;
    }

    .sf-threedot {
        opacity:.3;
    }

    .sf-threedot:hover {
        opacity: 1;
    }

    .completed-row > td:not(:first-child) {
        opacity: .5 !important;
    }

    .db {
        font-size: 13px;
        font-weight: bold;
    }
</style>

@code {
    [Parameter]
    public int RenewalId { get; set; }

    private Renewal renewal;
    private List<TaskItemViewModel> Tasks;
    private TrackTask editTrackTask;

    private async Task OpenDialogAsync()
    {
        int taskid = 1;
        Console.WriteLine("Opening dialog for row " + taskid);
        var tracktask = Tasks.FirstOrDefault(t => t.TaskItemId == taskid);
        if (tracktask != null)
        {

            await DialogService.ShowDialogAsync<_dialogEdit>(tracktask, new DialogParameters()
                {
                    Title = "Editing Track Task",
                    OnDialogResult = DialogService.CreateDialogCallback(this, HandleDialog),
                    PrimaryAction = "Yes",
                    PrimaryActionEnabled = false,
                    SecondaryAction = "No",
                    Width = "500px",
                    Height = "500px",
                    TrapFocus = true,
                    Modal = true,
                });
        }
    }

    private async Task HandleDialog(DialogResult result)
    {
        if (result.Cancelled)
        {
            await Task.Run(() => Console.WriteLine($"Dialog cancelled"));
            return;
        }
        if (result.Data is not null)
        {
            TrackTask? trackTask = result.Data as TrackTask;
            await Task.Run(() => Console.WriteLine($"Dialog closed for {trackTask?.TaskName}"));
            return;
        }

        await Task.Run(() => Console.WriteLine($"Dialog closed"));

    }


    protected override async Task OnInitializedAsync()
    {
        renewal = await RenewalService.GetRenewalByIdAsync(RenewalId);
        Tasks = await RenewalService.GetTasksForRenewalAsync(RenewalId);
        BreadcrumbService.UpdateBreadcrumb(new List<BreadcrumbItem>
        {
            new BreadcrumbItem { Text = "Home", Url = "/" },
            new BreadcrumbItem { Text = "Renewals", Url = "/Renewals" },
            new BreadcrumbItem { Text = "Editing #" + RenewalId }
        });
    }
    private async void HighlightRow(int taskid)
    {
        Console.WriteLine("Highlighting row " + taskid);
        var task = Tasks.FirstOrDefault(t => t.TaskItemId == taskid);
        if (task != null)
        {
            task.IsHighlighted = !task.IsHighlighted;
            await RenewalService.UpdateTaskHighlight(taskid, task.IsHighlighted);
            StateHasChanged();
        }
    }

    private async void OnCompletedChanged(int taskItemId, object isChecked)
    {
        var task = Tasks.FirstOrDefault(t => t.TaskItemId == taskItemId);
        if (task != null)
        {
            task.IsCompleted = (bool)isChecked;
            await RenewalService.UpdateTaskCompleted(taskItemId, task.IsCompleted);
            StateHasChanged();
        }
    }
    private async void OnNotesChanged(int taskItemId, string newNotes)
    {
        var task = Tasks.FirstOrDefault(t => t.TaskItemId == taskItemId);
        if (task != null)
        {
            task.Notes = newNotes;
            // Call your save method here, e.g., _taskService.SaveNotes(taskItemId, newNotes);
        }
    }


    private string GetRowClass(TaskItemViewModel task)
    {
        var classes = new List<string>();
        if (task.IsHighlighted)
        {
            classes.Add("highlighted-row");
        }
        if (task.IsCompleted)
        {
            classes.Add("completed-row");
        }
        return string.Join(" ", classes);
    }
}
