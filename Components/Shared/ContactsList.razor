@namespace Mantis.Components.Shared
@using Microsoft.FluentUI.AspNetCore.Components
@using Syncfusion.Blazor.Buttons
@using Microsoft.AspNetCore.Components.Routing
@using Mantis.Domain.Contacts.Models
@using Mantis.Components.Shared
@using Mantis.Domain.Shared.Helpers
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div>
    @if (Contacts == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!Contacts.Any())
    {
        <p>No contacts found for this parent.</p>
    }
    else
    {
        foreach (var item in Contacts)
        {
            string fullName = item.FirstName + " " + item.LastName;
            string nameInitials; ;
            try
            {
                nameInitials = $"{item.FirstName[0]}{item.LastName[0]}";
            }
            catch
            {
                nameInitials = "??";
            }

            // Build the headshot image path per contact
            string headshotImage = !string.IsNullOrEmpty(item.HeadshotFilename)
            ? "/uploads/headshots/" + item.HeadshotFilename
            : null;

            <FluentStack Class="@("m-contact-" + IsPrimary)">
                <div>
                    <FluentPersona Initials="@nameInitials" ImageSize="55px" Class="txt-persona" Image="@headshotImage" />
                </div>

                <div>
                    <span class="m-name">
                        @item.FirstName @item.LastName
                    </span>
                    @if (item.Title != null)
                    {
                        <span class="m-title">, @item.Title</span>
                    }
                    <br />

                    @if (item.Email != null)
                    {
                        <div class="m-email">@item.Email</div>
                    }
                    @if (item.Phone != null)
                    {
                        <span class="m-phone m-padafter">
                            @DateHelper.FormatPhoneNumber(item.Phone)
                            <span class="m-phonetype">ph.</span>
                        </span>
                    }
                    @if (item.Mobile != null)
                    {
                        <span class="m-phone m-padafter">
                            @DateHelper.FormatPhoneNumber(item.Mobile)
                            <span class="m-phonetype">cell</span>
                        </span>
                    }
                </div>
                <div style="margin-left: auto;">
                    @if (IsPrimary == true)
                    {
                        <div>
                            <FluentIcon Value="@(new Icons.Filled.Size24.Star())" Color="Color.Accent" />
                        </div>
                    }
                    else
                    {
                        <UI_ToggleBookmark IsStarred="@item.IsStarred" OnStarChanged="@((bool isStarred) => ToggleStar(item.ContactId, isStarred))" />
                    }
                    <a href="/Contacts/Edit/@(item.ContactId)">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Pen())" CustomColor="#6b6b6b" Color="Color.Custom" />
                    </a>
                </div>
            </FluentStack>
        }
    }
</div>

@code {
    [Parameter]
    public ICollection<Contact> Contacts { get; set; }  // List of contacts passed from the parent component

    [Parameter]
    public string ParentType { get; set; }

    [Parameter]
    public int ParentId { get; set; }

    [Parameter]
    public bool IsPrimary { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        InvokeAsync(StateHasChanged);
    }
    private void ToggleStar(int contactId, bool isStarred)
    {

    }

}