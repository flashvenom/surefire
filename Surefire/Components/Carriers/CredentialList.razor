@inherits AppComponentBase
@using Surefire.Domain.Carriers.Models
@using Surefire.Domain.Carriers.Services
@inject CarrierService CarrierService
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<FluentDialog @bind-Hidden="dialogHidden">
    <div>
        <h3>Confirm Delete</h3>
        <p>Are you sure you want to delete this credential?</p>
    </div>
    <FluentDialogFooter>
        <FluentButton Type="ButtonType.Button" OnClick="ConfirmDelete" Appearance="Appearance.Accent">Delete</FluentButton>
        <FluentButton Type="ButtonType.Button" OnClick="CancelDelete" Appearance="Appearance.Outline">Cancel</FluentButton>
    </FluentDialogFooter>
</FluentDialog>

<div>
    <table class="credentials-table">
        <thead>
            <tr>
                <th class="txt-small" style="padding-right:15px; color:#ccc;">Staff</th>
                <th class="txt-small colu" style="color:#ccc;">Username</th>
                <th class="txt-small colp" style="color:#ccc;">Password</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var credential in Credentials)
            {
                string headshotImage = "/img/staff/" + credential.CreatedBy?.PictureUrl;
                <tr style="border-top:1px solid #ccc;">
                    <td rowspan="2" style="padding-right:15px;"><FluentPersona Initials="--" ImageSize="50px" Class="txt-persona" Image="@headshotImage" /></td>
                    <td style="font-size:14px;">
                        @credential.Username
                        <FluentIcon Value="@(new Icons.Regular.Size20.Copy())" OnClick="() => CopyToClipboard(credential.Username)" />
                    </td>
                    <td style="font-size:14px;">
                        @("*".PadLeft(credential.Password?.Length ?? 0, '*'))
                        <FluentIcon Value="@(new Icons.Regular.Size20.Copy())" OnClick="() => CopyToClipboard(credential.Password)" />
                    </td>
                    <td rowspan="2">
                        <FluentStack>
                            <FluentIcon Value="@(new Icons.Regular.Size24.Delete())" OnClick="() => ShowDeleteConfirmation(credential.CredentialId)" />
                            <FluentIcon Value="@(new Icons.Regular.Size24.Edit())" OnClick="() => ShowEditDialog(credential)" />
                        </FluentStack>
                    </td>
                </tr>
                <tr class="last-of-set">
                    <td colspan="2" class="txt-reg-sm" style="vertical-align: top;">@credential.Notes</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div style="height:8px;"></div>
<a @onclick="ShowAddDialog" class="sf-add-button"><FluentIcon Value="@(new Icons.Regular.Size20.AddCircle())" Color="Color.Custom" CustomColor="#036ac4" /> Add Credential</a>

@code {
    [Parameter]
    public int CarrierId { get; set; }

    [Parameter]
    public ICollection<Credential> Credentials { get; set; }

    [Parameter]
    public EventCallback OnCredentialChanged { get; set; }

    private bool dialogHidden = true; // Tracks the dialog's visibility
    private int credentialToDelete; // Stores the credential to delete

    private void ShowDeleteConfirmation(int credentialId)
    {
        credentialToDelete = credentialId;
        dialogHidden = false; // Show the dialog
    }

    private void CancelDelete()
    {
        dialogHidden = true; // Hide the dialog
    }

    private async Task ConfirmDelete()
    {
        try
        {
            await CarrierService.DeleteCredentialAsync(credentialToDelete); // Delete the credential
            var credential = Credentials.FirstOrDefault(c => c.CredentialId == credentialToDelete);
            if (credential != null)
            {
                Credentials.Remove(credential);
            }
            dialogHidden = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting credential: {ex.Message}");
        }
    }

    private async Task ShowAddDialog()
    {
        var credential = new Credential { CarrierId = CarrierId };
        await OpenCredentialDialog(credential);
    }

    private async Task ShowEditDialog(Credential credential)
    {
        var credentialCopy = new Credential
            {
                CredentialId = credential.CredentialId,
                Username = credential.Username,
                Password = credential.Password,
                Website = credential.Website,
                Notes = credential.Notes,
                DateCreated = credential.DateCreated,
                DateModified = credential.DateModified,
                CarrierId = credential.CarrierId
            };

        await OpenCredentialDialog(credentialCopy);
    }

    private async Task OpenCredentialDialog(Credential credential)
    {
        var dialog = await DialogService.ShowDialogAsync<_dialogCredential>(credential, new DialogParameters()
            {
                Title = credential.CredentialId == 0 ? "Add Credential" : "Edit Credential",
                Width = "400px",
                PreventDismissOnOverlayClick = true,
                ["CarrierId"] = CarrierId
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            var updatedCredential = (Credential)result.Data;
            if (updatedCredential.CredentialId == 0)
            {
                await CarrierService.AddCredentialAsync(CarrierId, updatedCredential);
            }
            else
            {
                await CarrierService.UpdateCredentialAsync(updatedCredential);
            }
            await OnCredentialChanged.InvokeAsync(null);
        }
    }

    private async Task CopyToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }
}
