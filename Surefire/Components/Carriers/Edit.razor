@page "/Carriers/Edit/{CarrierId:int}"
@using Microsoft.EntityFrameworkCore
@using Surefire.Domain.Carriers.Models
@using Surefire.Domain.Carriers.Services
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@inject CarrierService CarrierService


<_toolbar CarrierId="@CarrierId" PageName="Edit" />

@if (carrier is null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="page-content">
    <h1>Edit Carrier</h1>
        <EditForm method="post" Model="carrier" OnValidSubmit="UpdateCarrier" FormName="edit" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="sfpage-newcarrier">
                <div class="sf-col-1">

                    <input type="hidden" name="carrier.CarrierId" value="@carrier.CarrierId" />
                    
                    <div class="mb-3">
                        <SfTextBox id="carriername" @bind-Value="carrier.CarrierName" Placeholder="Carrier Name" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.CarrierName" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox @bind-Value="carrier.LookupCode" Placeholder="Lookup Code" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.LookupCode" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox id="carriernickname" @bind-Value="carrier.CarrierNickname" Placeholder="Carrier Nickname" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.CarrierNickname" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox id="streetaddress" @bind-Value="carrier.StreetAddress" Placeholder="Street Address" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.StreetAddress" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox id="city" @bind-Value="carrier.City" Placeholder="City" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.City" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox id="state" @bind-Value="carrier.State" Placeholder="State" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.State" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox id="zip" @bind-Value="carrier.Zip" Placeholder="Zip" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.Zip" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox id="phone" @bind-Value="carrier.Phone" Placeholder="Phone" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.Phone" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>

                    <div class="mb-3">
                        <span class="txt-label">Logo</span>

                        @if (!string.IsNullOrEmpty(carrier.LogoFilename))
                        {
                            <div>
                                <img src="/uploads/logos/carrier/@carrier.LogoFilename" width="100" height="100" alt="Carrier Logo" /><br />
                                <FluentButton Appearance="Appearance.Lightweight" OnClick="@(async () => await RemoveFile(carrier.CarrierId))">Remove</FluentButton>
                            </div>
                        }
                        else
                        {
                            <SfUploader AutoUpload="true" AllowedExtensions=".jpg,.jpeg,.png" MaxFileSize="5000000">
                                <UploaderEvents ValueChange="@OnHeadshotUpload"></UploaderEvents>
                            </SfUploader>
                        }
                    </div>

    
                </div>
                <div class="sf-col-2">
                    <div class="mb-3">
                        <SfTextBox id="website" @bind-Value="carrier.Website" Placeholder="Website" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.Website" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox id="quotingwebsite" @bind-Value="carrier.QuotingWebsite" Placeholder="Quoting Website" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.QuotingWebsite" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox id="servicingwebsite" @bind-Value="carrier.ServicingWebsite" Placeholder="Servicing Website" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.ServicingWebsite" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox id="newsubmissionemail" @bind-Value="carrier.NewSubmissionEmail" Placeholder="New Submission Email" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.NewSubmissionEmail" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox id="servicingemail" @bind-Value="carrier.ServicingEmail" Placeholder="Servicing Email" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.ServicingEmail" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="cb">
                        <FluentCheckbox id="issuingcarrier" @bind-Value="carrier.IssuingCarrier" Label="Issuer" />
                        <ValidationMessage For="() => carrier.IssuingCarrier" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="cb">
                        <FluentCheckbox id="wholesaler" @bind-Value="carrier.Wholesaler" Label="Wholesaler" />
                        <ValidationMessage For="() => carrier.Wholesaler" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox id="appetitejson" @bind-Value="carrier.AppetiteJson" Placeholder="AppetiteJson" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.AppetiteJson" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox id="quotelinesjson" @bind-Value="carrier.QuotelinesJson" Placeholder="QuotelinesJson" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.QuotelinesJson" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                    <div class="mb-3">
                        <SfTextBox id="notes" @bind-Value="carrier.Notes" Placeholder="Notes" FloatLabelType="FloatLabelType.Always" />
                        <ValidationMessage For="() => carrier.Notes" class="text-danger" FloatLabelType="FloatLabelType.Always" />
                    </div>
                </div>
            </div>
            <SfButton Content="Save Carrier" type="submit" CssClass="e-primary"></SfButton>
            <SfButton CssClass="e-primary" type="button" @onclick="cancelSubmit">Cancel</SfButton>
        </EditForm>
    </div>

}

@code {
    [Parameter]
    public int CarrierId { get; set; }

    [SupplyParameterFromForm]
    public Carrier? carrier { get; set; }

    [CascadingParameter] public Action<string> UpdateHeader { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UpdateHeader?.Invoke("Carriers");
        carrier = await CarrierService.GetCarrierByIdAsync(CarrierId);

        if (carrier is null)
        {
            Navigation.NavigateTo("notfound");
        }
    }

    public void cancelSubmit()
    {
        Navigation.NavigateTo("/Carriers");
    }

    public async Task UpdateCarrier()
    {
        try
        {
            await CarrierService.UpdateCarrierAsync(carrier);
        }
        catch (DbUpdateConcurrencyException)
        {
            throw;
        }

        Navigation.NavigateTo("/Carriers/Details/" + CarrierId);
    }
    private async Task RemoveFile(int clientId)
    {
        await CarrierService.RemoveLogo(clientId);
        carrier.LogoFilename = null;
        StateHasChanged();
    }
    private async Task OnHeadshotUpload(UploadChangeEventArgs args)
    {
        if (args.Files != null && args.Files.Count > 0)
        {
            var file = args.Files[0];
            if (file != null)
            {
                //string uploadPath = $"wwwroot/uploads/logos/{client.ClientId}" + Path.GetExtension(file.FileInfo.Name);

                string extension = Path.GetExtension(file.FileInfo.Name);
                string fileName = $"{carrier.CarrierId}{extension}";
                string uploadPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/uploads/logos/carrier/", fileName);

                using (var stream = file.File.OpenReadStream(long.MaxValue))
                {
                    MemoryStream resizedImage;
                    if (extension == ".png")
                    {
                        resizedImage = await ImageResizer.ResizeImagePngAsync(stream, 500);
                    }
                    else
                    {
                        resizedImage = await ImageResizer.ResizeImageAsync(stream, 500);
                    }

                    // Make sure the resized image stream is positioned at the beginning
                    resizedImage.Seek(0, SeekOrigin.Begin);

                    using (var fileStream = new FileStream(uploadPath, FileMode.Create, FileAccess.Write))
                    {
                        // Copy the resized image to the file system
                        await resizedImage.CopyToAsync(fileStream);
                    }
                }

                // Update the Contact's HeadshotFilename field
                carrier.LogoFilename = fileName;
                await CarrierService.UpdateCarrierAsync(carrier);
                StateHasChanged(); // Refresh UI to show the updated headshot
            }
        }
    }
}
