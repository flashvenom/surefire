@inherits AppComponentBase
@using Surefire.Domain.Carriers.Models
@using Surefire.Domain.Carriers.Services
@using Microsoft.AspNetCore.Components
@implements IDialogContentComponent<Credential>
@inject CarrierService CarrierService

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>
    <EditForm Model="Content">
        <DataAnnotationsValidator />

        <FluentTextField @bind-Value="Content.Username" Placeholder="Username" Label="Username" />
        <FluentTextField @bind-Value="Content.Password" Placeholder="Password" Label="Password" />
        <FluentTextField @bind-Value="Content.Website" Placeholder="Website" Label="Website" />
        <FluentTextArea @bind-Value="Content.Notes" Placeholder="Notes" Label="Notes" />

        <p>Carrier ID: @CarrierId</p> <!-- Debugging line -->

        <div style="color: var(--error);">
            <FluentValidationSummary />
        </div>
    </EditForm>
</FluentDialogBody>


<!-- Footer -->
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public Credential Content { get; set; } = default!;

    [Parameter]
    public int CarrierId { get; set; } // Add CarrierId as a parameter

    protected override void OnInitialized()
    {
        CarrierId = Dialog.Instance.Parameters.Get<int>("CarrierId"); // Set CarrierId from dialog parameters
    }

    private async Task SaveAsync()
    {
        if (CarrierId == 0)
        {
            // Handle error or set CarrierId if missing
            throw new InvalidOperationException("CarrierId must be set to add a new credential.");
        }

        await Dialog.CloseAsync(Content);
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
}
