@page "/Clients/Edit/{ClientId:int}"
@using Surefire.Domain.Clients.Models
@using Surefire.Domain.Clients.Services
@using Surefire.Domain.Contacts.Models
@using Surefire.Domain.Contacts.Services
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Microsoft.EntityFrameworkCore
@inject ClientService ClientService
@inject ContactService ContactService

<_toolbar ClientId="@ClientId" PageName="Edit" ClientLoaded="true" />

<div class="page-content">
    <div class="mh1">Edit Client</div>
    @if (client == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm Model="client" OnValidSubmit="UpdateClient" FormName="edit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mf-flex mf-flex-row mf-row-container">
                <div class="mf-item-lg">
                    <SfTextBox id="clientName" @bind-Value="client.Name" Placeholder="Client Name" FloatLabelType="FloatLabelType.Always" />
                    <ValidationMessage For="() => client.Name" class="text-danger" />

                    <SfTextBox id="lookupCode" @bind-Value="client.LookupCode" Placeholder="Lookup Code" FloatLabelType="FloatLabelType.Always" />
                    <ValidationMessage For="() => client.LookupCode" class="text-danger" />

                    <SfTextBox id="phoneNumber" @bind-Value="client.PhoneNumber" Placeholder="Phone Number" FloatLabelType="FloatLabelType.Always" />
                    <ValidationMessage For="() => client.PhoneNumber" class="text-danger" />

                    <SfTextBox id="email" @bind-Value="client.Email" Placeholder="Email" FloatLabelType="FloatLabelType.Always" />
                    <ValidationMessage For="() => client.Email" class="text-danger" />

                    <SfTextBox id="website" @bind-Value="client.Website" Placeholder="Website" FloatLabelType="FloatLabelType.Always" />
                    <ValidationMessage For="() => client.Website" class="text-danger" />

                    <SfTextBox id="comments" @bind-Value="client.Comments" Placeholder="Comments" FloatLabelType="FloatLabelType.Always" />
                    <ValidationMessage For="() => client.Comments" class="text-danger" />
                </div>

                <div class="mf-item-lg mf-pad-left">
                    <SfTextBox id="addressLine1" @bind-Value="client.Address.AddressLine1" Placeholder="Address Line 1" FloatLabelType="FloatLabelType.Always" />
                    <ValidationMessage For="() => client.Address.AddressLine1" class="text-danger" />

                    <SfTextBox id="addressLine2" @bind-Value="client.Address.AddressLine2" Placeholder="Address Line 2" FloatLabelType="FloatLabelType.Always" />

                    <SfTextBox id="city" @bind-Value="client.Address.City" Placeholder="City" FloatLabelType="FloatLabelType.Always" />
                    <ValidationMessage For="() => client.Address.City" class="text-danger" />

                    <SfTextBox id="state" @bind-Value="client.Address.State" Placeholder="State" FloatLabelType="FloatLabelType.Always" />
                    <ValidationMessage For="() => client.Address.State" class="text-danger" />

                    <SfTextBox id="postalCode" @bind-Value="client.Address.PostalCode" Placeholder="Postal Code" FloatLabelType="FloatLabelType.Always" />
                    <ValidationMessage For="() => client.Address.PostalCode" class="text-danger" />

                         <!-- Primary Contact Dropdown -->
                    <SfDropDownList TValue="int" TItem="Contact" DataSource="@allContacts" Placeholder="Primary Contact" @bind-Value="client.PrimaryContactId" PopupHeight="230px" FloatLabelType="FloatLabelType.Always">
                        <DropDownListFieldSettings Text="FullName" Value="ContactId" />
                    </SfDropDownList>
                    <ValidationMessage For="() => client.PrimaryContactId" class="text-danger" />
                    
                </div>

                <div class="mf-item-lg mf-pad-left">
                    <div class="mb-3">
                        <span class="txt-label">Logo</span>

                        @if (!string.IsNullOrEmpty(client.LogoFilename))
                        {
                            <div>
                                <img src="/uploads/logos/@client.LogoFilename" width="100" height="100" alt="Headshot" /><br />
                                <FluentButton Appearance="Appearance.Lightweight" OnClick="@(async () => await RemoveFile(client.ClientId))">Remove</FluentButton>
                            </div>
                        }
                        else
                        {
                            <SfUploader AutoUpload="true" AllowedExtensions=".jpg,.jpeg,.png" MaxFileSize="5000000">
                                <UploaderEvents ValueChange="@OnHeadshotUpload"></UploaderEvents>
                            </SfUploader>
                        }
                    </div>

                </div>

            </div>

            <br />

            <SfButton Content="Cancel" CssClass="e-secondary" type="button" @onclick="CancelEdit"></SfButton>&nbsp;
            <SfButton Content="Update Client" CssClass="e-primary" type="submit"></SfButton>
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public int ClientId { get; set; }

    private Client client;
    private List<Contact> allContacts = new List<Contact>();
    private int existingPrimaryContactId;
    [CascadingParameter] public Action<string> UpdateHeader { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UpdateHeader?.Invoke("Clients");
        client = await ClientService.GetClientById(ClientId);
        existingPrimaryContactId = client.PrimaryContactId;
        if (client == null)
        {
            Navigation.NavigateTo("notfound");
        }
        else
        {
            // Load the contacts for the client
            var clientContacts = client.Contacts.ToList();

            // If the primary contact exists and is not in the client contacts, fetch and add it
            if (client.PrimaryContactId != 0 && !clientContacts.Any(c => c.ContactId == client.PrimaryContactId))
            {
                var primaryContact = await ContactService.GetContactByIdAsync(client.PrimaryContactId);
                if (primaryContact != null)
                {
                    clientContacts.Add(primaryContact);
                }
            }

            // Set allContacts to include both regular and primary contacts
            allContacts = clientContacts;
        }
    }

    private async Task RemoveFile(int clientId)
    {
        await ClientService.RemoveLogo(clientId);
        client.LogoFilename = null;
        StateHasChanged();
    }
    private async Task OnHeadshotUpload(UploadChangeEventArgs args)
    {
        if (args.Files != null && args.Files.Count > 0)
        {
            var file = args.Files[0];
            if (file != null)
            {
                //string uploadPath = $"wwwroot/uploads/logos/{client.ClientId}" + Path.GetExtension(file.FileInfo.Name);

                string extension = Path.GetExtension(file.FileInfo.Name);
                string fileName = $"{client.ClientId}{extension}";
                string uploadPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/uploads/logos/", fileName);

                using (var stream = file.File.OpenReadStream(long.MaxValue))
                {
                    MemoryStream resizedImage;
                    if (extension == ".png")
                    {
                        resizedImage = await ImageResizer.ResizeImagePngAsync(stream, 500);
                    }
                    else
                    {
                        resizedImage = await ImageResizer.ResizeImageAsync(stream, 500);
                    }

                    // Make sure the resized image stream is positioned at the beginning
                    resizedImage.Seek(0, SeekOrigin.Begin);

                    using (var fileStream = new FileStream(uploadPath, FileMode.Create, FileAccess.Write))
                    {
                        // Copy the resized image to the file system
                        await resizedImage.CopyToAsync(fileStream);
                    }
                }

                // Update the Contact's HeadshotFilename field
                client.LogoFilename= fileName;
                await ClientService.UpdateClientAsync(client);
                StateHasChanged(); // Refresh UI to show the updated headshot
            }
        }
    }
    private async Task UpdateClient()
    {
        try
        {
            // Check if the primary contact has changed
            if (client.PrimaryContactId != existingPrimaryContactId)
            {
                // If the old primary contact exists and it's being changed and it doesn't have a clientId set, set its ClientId to prevent it from becoming orphaned
                if (existingPrimaryContactId != 0)
                {
                    var oldPrimaryContact = await ContactService.GetContactByIdAsync(existingPrimaryContactId);
                    if (oldPrimaryContact != null && oldPrimaryContact.ClientId == null)
                    {
                        Console.WriteLine($"Updating old primary contact's ClientId to {ClientId}------------------------------");
                        oldPrimaryContact.ClientId = ClientId; // Reassign the client ID to prevent it from becoming orphaned
                        await ContactService.UpdateContactAsync(oldPrimaryContact);
                    }
                }
            }else{
                //Check to see if the existing primary contact has a client id set
                var oldPrimaryContact = await ContactService.GetContactByIdAsync(existingPrimaryContactId);
                if (oldPrimaryContact != null && oldPrimaryContact.ClientId == null)
                {
                    Console.WriteLine($"Updating old primary contact's ClientId to {ClientId}------------------------------");
                    oldPrimaryContact.ClientId = ClientId; // Reassign the client ID to prevent it from becoming orphaned
                    await ContactService.UpdateContactAsync(oldPrimaryContact);
                }
            }

            // Proceed with updating the client
            await ClientService.UpdateClientAsync(client);
            Navigation.NavigateTo("/Clients/" + ClientId);
        }
        catch (DbUpdateConcurrencyException)
        {
            throw;
        }
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo("/Clients/" + ClientId);
    }
}
