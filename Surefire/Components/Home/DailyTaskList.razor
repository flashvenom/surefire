@using Surefire.Domain.Renewals.ViewModels
@using Surefire.Domain.Renewals.Services
@using Syncfusion.Blazor.Notifications
@inject IJSRuntime JS
@inject TaskService TaskService

<div class="sectiontitletab">Daily Checklist</div>
<div class="dailytask-box">
    <div class="add-field">
        <FluentTextField Id="newTaskInput" Placeholder="Add a new to-do item..." @bind-Value="newTaskName" @onkeyup="OnKeyUp" Style="width:100% !important;">
            <FluentIcon Value="@(new Icons.Regular.Size16.Add())" Slot="end" Color="Color.Neutral" @onclick="AddNewTask" />
        </FluentTextField>
    </div>

    @if (isLoading)
    {
        for (var i = 0; i < 7; i++)
        {
            <SfSkeleton Shape=SkeletonType.Rectangle Width="100%" Height="20px" CssClass="e-customize" Visible="true"></SfSkeleton>
        }
    }
    else
    {
        @if (!IncompleteTasks.Any())
        {
            <div class="nothingfound">No tasks left today! You're a rockstar!</div>
        }
        else
        {
            <FluentSortableList Id="sortableList" Items="IncompleteTasks" Style="--fluent-sortable-list-item-height: 25px;" OnUpdate="HandleOnUpdate">
                <ItemTemplate>
                    <div class="sortitem @GetTaskCssClass(context)" @key="context.Id">
                        <FluentCheckbox Checked="@context.Completed" @onchange="async (e) => await ToggleTaskCompletion(context)" />
                        <span class="ellipsis" style="margin-left: 10px;">@context.TaskName</span>
                    </div>
                </ItemTemplate>
            </FluentSortableList>
        }
        @if (CompletedTasks.Any())
        {
            <ul class="task-list completed-ts">
                @foreach (var task in CompletedTasks)
                {
                    <li class="@GetTaskCssClass(task)" @key="task.Id">
                        <FluentCheckbox Checked="@task.Completed" @onchange="async (e) => await ToggleTaskCompletion(task)" />
                        <span class="ellipsis" style="margin-left: 10px;">@task.TaskName</span>
                    </li>
                }
            </ul>
        }
    }
</div>

<style>
    .completed-task {
        opacity: 0.5;
    }

    .task-list {
        list-style-type: none;
        padding: 0;
    }

        .task-list li {
            display: flex;
            align-items: center;
            padding: 5px 0;
        }
</style>

@code {
    [Parameter] public List<DailyTask> IncompleteTasks { get; set; } = new List<DailyTask>();
    [Parameter] public List<DailyTask> CompletedTasks { get; set; } = new List<DailyTask>();
    [Parameter] public bool isLoading { get; set; }

    private string newTaskName = "";
    private async Task AddNewTask()
    {
        await JS.InvokeVoidAsync("blurField", "newTaskInput");
        await Task.Delay(100);
        if (!string.IsNullOrWhiteSpace(newTaskName))
        {
            var newTask = new DailyTask { TaskName = newTaskName, Completed = false };
            await TaskService.AddNewDailyTaskAsync(newTask);
            IncompleteTasks.Add(newTask);
            newTaskName = "";
            await InvokeAsync(StateHasChanged);
        }
    }
    private string GetTaskCssClass(DailyTask task)
    {
        return task.Completed ? "completed-task" : "daily-task";
    }
    private async Task OnKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddNewTask();
        }
    }
    private async Task ToggleTaskCompletion(DailyTask task)
    {
        task.Completed = !task.Completed;
        await Task.Delay(200);
        if (task.Completed)
        {
            task.CompletedDate = DateTime.Now; // Set the completion date
            IncompleteTasks.Remove(task);
            CompletedTasks.Add(task);
        }
        else
        {
            task.CompletedDate = null; // Reset the completion date
            CompletedTasks.Remove(task);
            IncompleteTasks.Add(task);
        }

        await TaskService.UpdateDailyTaskAsync(task);

        StateHasChanged();
    }
    private async Task HandleOnUpdate(FluentSortableListEventArgs args)
    {
        var movedItem = IncompleteTasks[args.OldIndex];
        IncompleteTasks.RemoveAt(args.OldIndex);
        IncompleteTasks.Insert(args.NewIndex, movedItem);

        // Update the order of tasks in the list, ensuring tasks with null orders are handled
        for (int i = 0; i < IncompleteTasks.Count; i++)
        {
            IncompleteTasks[i].Order = i + 1; // Set the order (1-based index)
        }

        // Persist the order changes to the database
        await TaskService.UpdateDailyTaskOrderAsync(IncompleteTasks);
    }
}
