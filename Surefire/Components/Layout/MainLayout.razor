@using Surefire.Data;
@using Surefire.Domain.Shared.Services
@using Surefire.Domain.Clients.Models
@using Surefire.Domain.Contacts.Models
@using Surefire.Components.Layout
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using System.Security.Claims;
@using Microsoft.AspNetCore.SignalR.Client

@inherits LayoutComponentBase
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject HomeService HomeService
@inject StateService _stateService
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<CascadingValue Value="_stateService">
    <div id="sf-top-bar" class="top-bar">
        <div class="left-icons">
            <a href="/">
                <img src="/img/surefirelogo-s.png" alt="App Logo" class="app-logo" @onmousedown="startDrag" />
            </a>
            <span class="left-company">Bizname</span>
            <span class="left-dot">.</span>
            <span class="left-section">@headerText</span>
            <img src="/img/surefirelogo-s.png" alt="App Logo" class="app-logo" @onmousedown="startDrag" />

        </div>

        <_searchbar />

        <div class="right-icons">
            <AuthorizeView>
                <Authorized>
                     <FluentStack HorizontalAlignment="@HorizontalAlignment.End" VerticalAlignment="@VerticalAlignment.Center" Style="height: 48px; position:relative; left:-20px;">
                        <span class="chat-btn" @onclick="ToggleChopper"><FluentIcon Value="@(new Icons.Filled.Size32.Chat())" Color="Color.Custom" CustomColor="#fff" /></span>
                        <_profilemenu UserId="@UserId" />
                    </FluentStack>
                </Authorized>
                <NotAuthorized>
                    <a href="/Account/Manage" class="e-icon-btn e-icons">
                        <FluentIcon Value="@(new Icons.Regular.Size24.Person())" />
                    </a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>

    <div class="page">
        <NavMenu />
        <main>
            <article>
                <CascadingValue Value="(Action<string>)UpdateHeaderText">
                    @if (_stateService.IsInitialized)
                    {
                        <CascadingValue Value="(Action<string>)UpdateHeaderText">
                            @Body
                        </CascadingValue>
                    }
                    else
                    {
                        <div class="emptyLoader">
                            <svg id="Layer_1" data-name="Layer 1" class="rotate-scale-down-hor" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 300 299.65">
                                <defs>
                                    <style>
                                        .cls-1 {
                                        fill: url(#linear-gradient);
                                        stroke-width: 0px;
                                        }
                                    </style>
                                    <linearGradient id="linear-gradient" x1="0" y1="149.83" x2="300" y2="149.83" gradientUnits="userSpaceOnUse">
                                        <stop offset="0" stop-color="#f89520" />
                                        <stop offset="1" stop-color="#eb1f27" />
                                    </linearGradient>
                                </defs>
                                <path class="cls-1" d="m224.93,107.35c-8.74-3.66-17.76-7.23-25.48-12.55,0-.03,0-.05,0-.05-6.22-4.3-11.57-10.64-15.56-17.14-3.52-5.74-3.87-13.17,2.13-18.33,5.74-4.93,11.19-7.69,19.23-2.03,8.03,5.65,6.89,23.92,26.65,37.01,15.03,7.51,34.87,19.01,68.09-11.28-51.57,24.04-10.74-35.47-35.39-41.14-24.64-5.67-41.99-6.57-75.23-26.82-5.67-3.46-11.59-6.69-17.74-9.17C162.42,2.13,152.95.22,143.73.02c-20.22-.47-39.2,7.26-51.54,22.09.03,0,.07-.01.1-.02,0,0-.01.01-.02.02,0,0,.03-.01.07-.03,22.94-4.33,45.39-6.81,62,14.24,6.85,8.68,7.99,21.09,3.54,30.11-2.66-17-11.32-28.68-28.5-30.38-9.52-.94-19.74.16-28.99,2.72-14.63,4.05-28.54,10.62-43.06,15.15-12.38,3.87-25.25,7.18-37.11-3.07,1.87,16.73,9.87,25.28,25.55,25.44,17.42.18,34.86-1.71,52.29-1.62,12.27.06,19.8,6.43,22.83,16.7,2.69,9.11-.96,19.81-8.67,25.42-8.3,6.04-20.76,6.26-29.64.49-2.41-1.57-4.74-3.25-7.84-5.39,3.85,19.99,10.2,26.83,28.38,29.71,7.41,1.17,15.12.87,22.67.6,18.37-.66,36.86-3.52,55.07-2.21,39.27,2.83,65.18,36.63,59.62,74.12-.13,0-.21-.01-.21-.01,0,0-.46,3.55-2.71,8.64-.52-5.33-.96-10.67-1.71-15.97-3.56-25.2-18.77-41.15-41.54-50.22-22.27-8.87-60.95-2.38-75.39,28.11.35-.74,6.54-1.4,7.35-1.56,5.33-1.06,10.75-1.89,16.18-2.02,11.47-.26,21.42,4.01,16.69,17.09-8.54,26.23-35,29.78-58.74,14.97-19.07-11.9-33.1-18.51-45.52-43.34,2.83,32.23,33.2,56.82,46.6,65.33,15.24,9.8,64.8,26.49,84.06,10.06,8.51-6.28,13.95-12.5,17.19-18.48-1.61,18.2-16.1,51.14-82.09,31.76-35.93-12.41-44.43-21.78-61.1-38.17-15.77-15.5-27.02-16.42-39.34-16.28-8.62.1-16.72,5.88-20.2,8.49,5.26-2.03,19.54,1.39,28.53,8.28,8.99,6.89,18.51,36.59,38.11,50.52,28.42,20.36,40.67,28.31,86.08,28.31s69.65-15.24,79.56-21.22c5.02-2.62,9.61-5.41,13.44-8.39,53.14-41.32,51.2-132.49-20.79-162.69Z" />
                            </svg>
                        </div>
                    }
                </CascadingValue>
            </article>
            <chopper class="chopper @chopperClass">

            </chopper>
        </main>
    </div>
</CascadingValue>
<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
<_statusbar />
<FluentToastProvider MaxToastCount="10" RemoveToastsOnNavigation="false" Position="ToastPosition.BottomRight" />
<FluentDialogProvider />
<FluentTooltipProvider />
<FluentMessageBarProvider />
<FluentMenuProvider />
<FluentKeyCodeProvider />

<script>
    window.addEventListener('visibilitychange', function () {
    // Focuses on the FireSearch field when Surefire is brought back into focus
    var fluentTextField = document.getElementById('fSearcher');
    document.getElementById('fSearcher').focus();

    if (fluentTextField && fluentTextField.shadowRoot) {
    var input = fluentTextField.shadowRoot.querySelector('input');
    if (input) {
    input.focus();
    }
    }else{
    fluentTextField.focus();
    }
    });
</script>

@code {
    private ClaimsPrincipal User { get; set; }
    public string UserId { get; set; }
    public int CallerClientId { get; set; }
    public int CallerContactId { get; set; }
    private string headerText = "Home";
    private bool isUserInitialized = false;
    private bool isInitialized = false;
    private bool isLoading = true;
    private string chopperClass = "chopper-expand-False";
    private bool chopperExpanded = false;

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    private HubConnection? hubConnection;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_stateService.IsInitialized)
        {
            // Console.WriteLine("MainLayout initializing StateService in background...");
            await _stateService.InitializeStateAsync(AuthStateProvider.GetAuthenticationStateAsync());
            // Mark as initialized
            isInitialized = true;
            isLoading = false;
            // Notify UI
            StateHasChanged();
        }
    }

    private void ToggleChopper()
    {
        
        chopperExpanded = !chopperExpanded;
        chopperClass = "chopper-expand-" + chopperExpanded;
        Console.WriteLine($"Chopexp: {chopperClass}");
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        _stateService.HtmlUser = _stateService.CurrentUser?.Id ?? "Everyone";

        // Initialize SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificationHub"))
            .Build();

        // Start the SignalR connection
        await hubConnection.StartAsync();

        // Register handler for incoming call notifications
        hubConnection.On<CallInfo>("ReceiveCallNotification", (callInfo) =>
        {
            Console.WriteLine($"Incoming call detected: {callInfo.CallerId}");
            ShowIncomingCallToast(callInfo);
        });

        isLoading = false;
    }

    public async Task ShowIncomingCallToast(CallInfo callInfo)
    {
        try
        {
            // Extract caller ID and name from callInfo
            string callerId = callInfo.CallerId;
            var callerName = callInfo.CallerName;

            // Call the GetCallerInfo method to search for matches in the database
            var matches = await HomeService.GetCallerInfo(callInfo);
            if (matches != null && matches.MatchedClient != null)
            {
                // Set matched client and contact IDs
                CallerClientId = matches.MatchedClient.ClientId;

                // Display success toast notification
                ToastService.ShowCommunicationToast(new ToastParameters<CommunicationToastContent>()
                    {
                        Intent = ToastIntent.Success,
                        Title = $"Incoming Call from {matches.MatchedClient.Name}",
                        Timeout = 30000,
                        PrimaryAction = "Open Client Screen",
                        OnPrimaryAction = EventCallback.Factory.Create<ToastResult>(this, ClickedPrimary),
                        Content = new CommunicationToastContent()
                        {
                            Subtitle = $"Call ID: {callerName}",
                            Details = $"Call Number: {callerId}",
                        },
                    });
            }
            if (matches != null && matches.MatchedContact != null)
            {
                CallerContactId = matches.MatchedContact.ContactId;
                CallerClientId = matches.MatchedContact.Client.ClientId;
                matches.MatchedClient = matches.MatchedContact.Client;
                // Display success toast notification
                ToastService.ShowCommunicationToast(new ToastParameters<CommunicationToastContent>()
                    {
                        Intent = ToastIntent.Success,
                        Title = $"Incoming Call from {matches.MatchedClient.Name}",
                        Timeout = 30000,
                        PrimaryAction = "Open Client Screen",
                        OnPrimaryAction = EventCallback.Factory.Create<ToastResult>(this, ClickedPrimary),
                        Content = new CommunicationToastContent()
                        {
                            Subtitle = $"CONTACT: {matches.MatchedContact.FirstName} {matches.MatchedContact.LastName}",
                            Details = $"{callerName} ({callerId})",
                        },
                    });
            }
            if (matches == null)
            {
                Console.WriteLine("No matches...");
                ToastService.ShowInfo($"Incoming Call from {callerName} ({callerId}) - No matches found in database.", 20000);
            }
        }
        catch (Exception ex)
        {
            // Catch any exceptions and log them to the console
            Console.WriteLine($"Error while displaying incoming call toast: {ex.Message}");
            Console.WriteLine(ex.StackTrace); // Optional: print the stack trace for debugging
        }
    }

    private void ClickedPrimary(ToastResult result)
    {

        Navigation.NavigateTo($"/Clients/{CallerClientId}");
    }

    private void ClickedSecondary()
    {
        //DemoLogger.WriteLine("Clicked secondary action");
    }

    public void UpdateHeaderText(string newText)
    {
        headerText = newText;
        StateHasChanged();

    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public async Task startDrag()
    {
        Console.WriteLine("Drag started");
        await JSRuntime.InvokeVoidAsync("topbarStartDrag");
    }
}