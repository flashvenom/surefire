@page "/Renewals/MasterTasks"
@using Surefire.Domain.Renewals.Models
@using Surefire.Domain.Renewals.Services
@using Microsoft.EntityFrameworkCore
@inject RenewalService RenewalService
@inject TaskService TaskService
@inject IDialogService DialogService

<_toolbar PageName="MasterTasks" OnMenuAction="HandleToolbarAction" />

<div class="page-content-datagrid">
    <div class="fluent-data-grid">
        @if (FilteredTasks != null)
        {
            <FluentDataGrid Items="@FilteredTasks" ResizableColumns="true" Pagination="@pagination" ShowHover="true"
                            OnRowClick="@((FluentDataGridRow<TaskMaster> row) => HandleRowClick(row))">
                <PropertyColumn Property="@(p => p.Id)" Title="Id" Width="60px" Sortable="true" />
                <PropertyColumn Property="@(p => p.TaskName)" Title="Task Name" Sortable="true" />
                <PropertyColumn Property="@(p => p.Description)" Title="Description" Sortable="true" />
                <PropertyColumn Property="@(p => p.DaysBeforeExpiration)" Title="Days Before Expiration" Sortable="true" />
                <PropertyColumn Property="@(p => p.ParentTaskId)" Title="Parent Task Id" Sortable="true" />
                <PropertyColumn Property="@(p => p.ForType)" Title="For Type" Sortable="true" />
                <PropertyColumn Property="@(p => p.Important)" Title="Important" Sortable="true" />
                <PropertyColumn Property="@(p => p.OrderNumber)" Title="Order Number" Sortable="true" />
            </FluentDataGrid>
            <div class="fluent-data-grid__bottombar">
                <div class="fluent-data-grid__pagination">
                    <FluentPaginator State="@pagination" />
                </div>
            </div>
        }
    </div>
</div>

<div>
    <FluentButton Appearance="Appearance.Accent" OnClick="ShowAddDialog">Add Task</FluentButton>
</div>

@code {
    public IQueryable<TaskMaster> TaskData { get; set; }
    public IQueryable<TaskMaster> FilteredTasks { get; set; }
    public int TaskId { get; set; }
    public string SelectedTaskName { get; set; } = "";
    public string SearchTerm { get; set; } = string.Empty;
    PaginationState pagination = new PaginationState { ItemsPerPage = 18 };
    private System.Timers.Timer debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        TaskData = (await RenewalService.GetAllTaskMasters()).AsQueryable();
        FilteredTasks = TaskData;
        debounceTimer = new System.Timers.Timer(300); // Debounce for 300ms
        debounceTimer.AutoReset = false; // Prevent multiple triggers
        debounceTimer.Elapsed += async (sender, e) =>
        {
            await InvokeAsync(ApplySearchFilter); // Apply the search filter after the debounce period
        };
    }
   
    private async Task HandleToolbarAction(string action)
    {
        if (action == "AddMasterTask")
        {
            await ShowAddDialog();
        }
    }

    private async Task ShowAddDialog()
    {
        var task = new TaskMaster();
        await OpenTaskDialog(task, "Add Task");
    }
    
    private void ApplySearchFilter()
    {
        FilteredTasks = string.IsNullOrWhiteSpace(SearchTerm)
            ? TaskData
            : TaskData.Where(t =>
                  EF.Functions.Like(t.TaskName.ToLower(), $"%{SearchTerm.ToLower()}%")
               || EF.Functions.Like(t.Description.ToLower(), $"%{SearchTerm.ToLower()}%")
               || EF.Functions.Like(t.ForType.ToLower(), $"%{SearchTerm.ToLower()}%"));

        InvokeAsync(StateHasChanged); // Trigger UI refresh after filtering
    }

    private void HandleRowClick(FluentDataGridRow<TaskMaster> row)
    {
        if (row != null && row.Item != null)
        {
            EditTask(row.Item);
        }
    }

    private async Task EditTask(TaskMaster task)
    {
        var taskCopy = new TaskMaster
            {
                Id = task.Id,
                TaskName = task.TaskName,
                Description = task.Description,
                DaysBeforeExpiration = task.DaysBeforeExpiration,
                ParentTaskId = task.ParentTaskId,
                ForType = task.ForType,
                Important = task.Important,
                OrderNumber = task.OrderNumber
            };

        await OpenTaskDialog(taskCopy, "Edit Task");
    }

    private async Task OpenTaskDialog(TaskMaster task, string title)
    {
        var dialog = await DialogService.ShowDialogAsync<_dialogMasterTasks>(task, new DialogParameters
            {
                Title = title,
                Width = "400px",
                PreventDismissOnOverlayClick = true
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            var updatedTask = (TaskMaster)result.Data;
            if (updatedTask.Id == 0)
            {
                await TaskService.AddTaskMasterAsync(updatedTask);
            }
            else
            {
                await TaskService.UpdateTaskMasterAsync(updatedTask);
            }

            // Refresh the data after the update
            TaskData = (await RenewalService.GetAllTaskMasters()).AsQueryable();
            ApplySearchFilter();
        }
    }
}
